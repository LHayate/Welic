using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using Classes.Entity;
using System.Linq.Expressions;
using System.Reflection;

namespace System.Windows.Forms.Uniube.RecursosGenericos
{
    //public class Column
    //{
    //    public enum SearchValueType { 
    //        FixedValue, 
    //        Interval, 
    //        InList, 
    //        NotInList, 
    //        StringContainsAny, 
    //        StringNotContainsAny, 
    //        StringContainsLeftRight, 
    //        StringNotContainsRightLeft }

    //    public bool _IsPrimaryKey { get; set; }
    //    public bool _IsForeignKey { get; set; }
    //    public bool _IsNullable { get; set; }
    //    public Type _Type { get; set; }
    //    public SearchValueType _SearchValueType { get; set; }
    //    public string _ColumnName { get; set; }
    //    public string _ColumnComments { get; set; }
    //    public object _Value { get; set; }

    //    public Column()
    //    {
    //        //padrão
    //        this._SearchValueType = SearchValueType.FixedValue;
    //    }

    //    public int Min()
    //    {
    //        return 0; 
    //    }
    //    public int Max()
    //    {
    //        return 0;
    //    }
    //}


    public class Entidades
    {
        //public void DbInsert()
        //{

        //}
        //public void DbDelete()
        //{

        //}
        //public void DbUpdate()
        //{

        //}

        public enum TipoSelect { Count, TabelaPrincipal, Detalhado }
        protected TipoSelect _TipoBusca;
        public string _Colunas;

        /// <summary>
        /// Quando informado, este OrderBy irá substituir o OrderBy padrão
        /// </summary>
        public string _OrderByPersonalizado;
        private string _OrderByPadrao;

        /// <summary>
        /// Order by para utilização fora do select, ou seja, no select * from (sql interna) + _OrderByExterno;
        /// Parametro deve ser passado sem o alias da tabela.
        /// Implementado no momento apenas no Run() na opção distinct. 16/12/2015 - Thales Correa
        /// </summary>
        public string _OrderByExterno;

        public Entidades()
        {
            this._OrderByPersonalizado = "";
            ListWhere = new List<Where>();
            ListWherePersonalizado = new List<string>();
        }

        public enum OpcaoRetorno { First, Min, Max, Sum, Distinct }

        /// <summary>
        /// Retorna a quantidade de registros COUNT(*) considerando apenas a tabela principal
        /// </summary>
        public int Count()
        {
            this._TipoBusca = TipoSelect.Count;
            int count = int.Parse(Run().Rows[0][0].ToString());
            return count;
        }

        /// <summary>
        /// Retorna os registros considerando apenas as colunas da tabela principal. Ao contrário do BuscarDetalhado, esta busca não faz nenhum relacionamento. 
        /// Exemplo de busca que este método realiza: SELECT a1.* FROM sga.alunos a1 WHERE ... ORDER BY ...
        /// </summary>
        public DataTable BuscarBasico()
        {
            this._TipoBusca = TipoSelect.TabelaPrincipal;
            return Run();
        }
        public DataTable BuscarBasico(ref System.Data.OracleClient.OracleCommand comando)
        {
            this._TipoBusca = TipoSelect.TabelaPrincipal;
            return Run(comando);
        }
        public object BuscarBasico(string coluna, OpcaoRetorno opcao = OpcaoRetorno.First)
        {
            this._TipoBusca = TipoSelect.TabelaPrincipal;
            object retorno = Run(coluna, opcao);
            return retorno;
        }
        public object BuscarBasico(ref System.Data.OracleClient.OracleCommand comando, string coluna, OpcaoRetorno opcao = OpcaoRetorno.First)
        {
            this._TipoBusca = TipoSelect.TabelaPrincipal;
            object retorno = Run(comando, coluna, opcao);
            return retorno;
        }

        public DataTable BuscarDetalhado()
        {
            this._TipoBusca = TipoSelect.Detalhado;
            return Run();
        }
        public DataTable BuscarDetalhado(ref System.Data.OracleClient.OracleCommand comando)
        {
            this._TipoBusca = TipoSelect.Detalhado;
            return Run(comando);
        }
        public object BuscarDetalhado(string coluna, OpcaoRetorno opcao = OpcaoRetorno.First)
        {
            this._TipoBusca = TipoSelect.Detalhado;
            object retorno = Run(coluna, opcao);
            return retorno;
        }
        public DataTable BuscarDetalhado(List<string> coluna, OpcaoRetorno opcao = OpcaoRetorno.First)
        {
            this._TipoBusca = TipoSelect.Detalhado;
            DataTable retorno = Run(coluna, opcao);
            return retorno;
        }
        public object BuscarDetalhado(ref System.Data.OracleClient.OracleCommand comando, string coluna, OpcaoRetorno opcao = OpcaoRetorno.First)
        {
            this._TipoBusca = TipoSelect.Detalhado;
            object retorno = Run(comando, coluna, opcao);
            return retorno;
        }

        /// <summary>
        /// Método para buscar a estrutura de colunas que a SQL retorna. A DataTable retornada sempre será vazia.
        /// </summary>
        public DataTable BuscarEstrutura()
        {
            string sqlDetalhado = EntidadeSqlSelectDetalhado();
            
            string sql = (sqlDetalhado.ToUpper().Contains("SELECT") ? sqlDetalhado : EntidadeSqlSelectTabelaPrincipal()) + " WHERE 1 = 2";

            if (_Colunas != null && !_Colunas.Trim().Equals(""))
                sql = "SELECT " + _Colunas + @" FROM (" + sql + ")";

            Classes.Dal.Conexao dal = new Classes.Dal.Conexao(Globals.GetStringConnection(), 2);
            DataTable dt = dal.ExecuteQuery(sql);
            return dt;
        }

        private string MontarSql()
        {
            string sql = "";

            if (this._TipoBusca == TipoSelect.Count)
                sql = EntidadeSqlSelectCount();
            else if (this._TipoBusca == TipoSelect.TabelaPrincipal)
                sql = EntidadeSqlSelectTabelaPrincipal();
            else if (this._TipoBusca == TipoSelect.Detalhado)
            {
                string sqlDetalhado = EntidadeSqlSelectDetalhado();
                string sqlTabelaPrincipal = EntidadeSqlSelectTabelaPrincipal();

                if (sqlDetalhado == null || sqlDetalhado.Trim().Equals(""))
                    sql = sqlTabelaPrincipal;
                else
                    sql = sqlDetalhado;
            }

            sql += " " + EntidadeSqlWhere() + EntidadeSqlOrderBy();

            if (_Colunas != null && !_Colunas.Trim().Equals(""))
                sql = "SELECT " + _Colunas + @" FROM (" + sql + ")";

            sql = "SELECT * FROM (" + sql + ")";

            return sql;
        }

        private Exception MontarExceptionErroExecutarSql(Exception exceptionOrigem, string sql)
        {
            if (new int[] { 18640 }.Contains(Globals.Usuario))
                Clipboard.SetText(sql);

            string message = exceptionOrigem.Message;
            string innerException = "";
            if (exceptionOrigem.InnerException != null)
                innerException = exceptionOrigem.InnerException.ToString();

            return new Exception(
                "Erro ao executar SQL em\n\n" +
                "Classe: System.Windows.Forms.Uniube.RecursosGenericos.Entidades\n" +
                "Message: " + message + "\n" +
                innerException,
                new Exception(sql));
        }
        private DataTable Run()
        {
            DataTable dtRetorno = new DataTable();

            string sql = MontarSql();

            try
            {
                Classes.Dal.Conexao dal = new Classes.Dal.Conexao(Globals.GetStringConnection(), 2);
                dtRetorno = dal.ExecuteQuery(sql);
            }
            catch (Exception ex)
            {
                throw MontarExceptionErroExecutarSql(ex, sql);
            }
            return dtRetorno;
        }
        private DataTable Run(System.Data.OracleClient.OracleCommand comando)
        {
            DataTable dtRetorno = new DataTable();

            string sql = MontarSql();

            try
            {
                comando.CommandText = sql;
                System.Data.OracleClient.OracleDataAdapter oda = new System.Data.OracleClient.OracleDataAdapter(comando);
                oda = new System.Data.OracleClient.OracleDataAdapter(comando);
                oda.Fill(dtRetorno);
            }
            catch (Exception ex)
            {
                throw MontarExceptionErroExecutarSql(ex, sql);
            }

            return dtRetorno;
        }
        private object Run(string coluna, OpcaoRetorno opcao)
        {
            string auxColunaSelect = "";
            if (opcao == OpcaoRetorno.First) auxColunaSelect = coluna;
            else if (opcao == OpcaoRetorno.Min) auxColunaSelect = "min(" + coluna + ") AS " + coluna;
            else if (opcao == OpcaoRetorno.Max) auxColunaSelect = "max(" + coluna + ") AS " + coluna;
            else if (opcao == OpcaoRetorno.Sum) auxColunaSelect = "sum(nvl(" + coluna + ",0)) AS " + coluna;
            else if (opcao == OpcaoRetorno.Distinct) auxColunaSelect = "distinct " + coluna;

            string sql = MontarSql();
            //sql = sql.Replace("*", auxColunaSelect);
            sql = sql.Replace("SELECT *", "SELECT " + auxColunaSelect);

            object retorno = null;
            try
            {
                Classes.Dal.Conexao dal = new Classes.Dal.Conexao(Globals.GetStringConnection(), 2);
                DataTable dt = dal.ExecuteQuery(sql);
                retorno = dt.Rows[0][0];
            }
            catch (Exception ex)
            {
                throw MontarExceptionErroExecutarSql(ex, sql);
            }

            return retorno;
        }
        private DataTable Run(List<string> coluna, OpcaoRetorno opcao)
        {
            string auxColunaSelect = "";
            if (opcao == OpcaoRetorno.Distinct) auxColunaSelect = "distinct ";
            else throw new Exception("Erro em Recurso Genérico ao realizar busca.");
            
            foreach (string item in coluna)
            {
                auxColunaSelect += item + ", ";
            }
            auxColunaSelect = auxColunaSelect.Substring(0, auxColunaSelect.Length - 2);

            string sql = MontarSql();
            sql = sql.Replace("SELECT *", "SELECT " + auxColunaSelect);
            sql += _OrderByExterno;

            DataTable dt = new DataTable();
            try
            {
                Classes.Dal.Conexao dal = new Classes.Dal.Conexao(Globals.GetStringConnection(), 2);
                dt = dal.ExecuteQuery(sql);
            }
            catch (Exception ex)
            {
                throw MontarExceptionErroExecutarSql(ex, sql);
            }
            return dt;
        }
        private object Run(System.Data.OracleClient.OracleCommand comando, string coluna, OpcaoRetorno opcao)
        {
            string auxColunaSelect = "";
            if (opcao == OpcaoRetorno.First) auxColunaSelect = coluna;
            else if (opcao == OpcaoRetorno.Min) auxColunaSelect = "min(" + coluna + ") AS " + coluna;
            else if (opcao == OpcaoRetorno.Max) auxColunaSelect = "max(" + coluna + ") AS " + coluna;
            else if (opcao == OpcaoRetorno.Sum) auxColunaSelect = "sum(nvl(" + coluna + ",0)) AS " + coluna;

            string sql = MontarSql();
            sql = sql.Replace("*", auxColunaSelect);

            object retorno = null;
            try
            {
                DataTable dt = new DataTable();
                comando.CommandText = sql;
                System.Data.OracleClient.OracleDataAdapter oda = new System.Data.OracleClient.OracleDataAdapter(comando);
                oda = new System.Data.OracleClient.OracleDataAdapter(comando);
                oda.Fill(dt);

                retorno = dt.Rows[0][0];
            }
            catch (Exception ex)
            {
                throw MontarExceptionErroExecutarSql(ex, sql);
            }

            return retorno;
        }


        protected bool ParametroEhValido(object parametro)
        {
            if (parametro != null)
            {
                Type tipo = parametro.GetType();
                if (tipo.Equals(typeof(List<int>)))
                {
                    if (parametro != null && ((List<int>)parametro).Count > 0)
                        return true;
                    else
                        return false;
                }
                else if (tipo.Equals(typeof(List<string>)))
                {
                    if (parametro != null && ((List<string>)parametro).Count > 0)
                        return true;
                    else
                        return false;
                }
                else if (!parametro.ToString().Trim().Equals("") && !parametro.ToString().Equals("  /  /       :  :"))
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        private List<Where> ListWhere;
        private List<string> ListWherePersonalizado;
        public void AddWherePersonalizado(string clause)
        {
            ListWherePersonalizado.Add(clause);
        }

        public string MontarAlias()
        {
            string nomeClasse = this.GetType().Name;
            string alias = "";
            foreach (string item in nomeClasse.Split('_'))
                alias += item.Substring(0, 1).ToLower();
            alias += "1";

            return alias;
        }
        private void CarregarParametrosWhere()
        {
            ListWhere.Clear();

            System.Reflection.PropertyInfo[] propridedades = this.GetType().GetProperties();
            List<string> colunas = new List<string>();
            foreach (System.Reflection.PropertyInfo item in propridedades)
            {
                string nome = item.Name.Substring(1, item.Name.Length - 1);
                nome = nome.Replace("Itv_", "");
                WhereOptions? option = null;
                if (nome.Contains("ListIn_"))
                {
                    nome = nome.Replace("ListIn_", "");
                    option = WhereOptions.ListIn;
                }
                else if (nome.Contains("ListNotIn_"))
                {
                    nome = nome.Replace("ListNotIn_", "");
                    option = WhereOptions.ListNotIn;
                }
                else if (nome.Contains("PEX_"))
                {
                    option = WhereOptions.WherePersonalizado;
                }
                else if (nome.Contains("LikeIni_"))
                {
                    nome = nome.Replace("LikeIni_", "");
                    option = WhereOptions.LikeIni;
                }
                else if (nome.Contains("LikeFim_"))
                {
                    nome = nome.Replace("LikeFim_", "");
                    option = WhereOptions.LikeFim;
                }
                else if (nome.Contains("Like_"))
                {
                    nome = nome.Replace("Like_", "");
                    option = WhereOptions.Like;
                }

                object valorParametro = this.GetType().GetProperty(item.Name).GetValue(this, null);

                if (option == WhereOptions.WherePersonalizado)
                {

                    for (int i = 0; i < ListWherePersonalizado.Count; i++)
                    {
                        if (ListWherePersonalizado[i].Contains(item.Name))
                        {
                            if (ParametroEhValido(valorParametro))
                            {
                                ListWherePersonalizado[i] = ListWherePersonalizado[i].Replace(item.Name, valorParametro.ToString());
                            }
                            else
                            {
                                ListWherePersonalizado[i] = "";
                            }
                        }
                    }
                }
                else
                {
                    colunas.Add(nome.ToLower());
                    string coluna = (MontarAlias() + "." + nome).ToLower();

                    if (valorParametro != null && valorParametro.GetType().Equals(typeof(DateTime)) && (DateTime)valorParametro == DateTime.Parse("01/01/0001 00:00:00"))
                    {
                        valorParametro = null;
                    }

                    ListWhere.Add(new Where() { _Column = coluna, _Parameter = valorParametro, _Option = option });
                }
            }
        }

        private string _SqlDetalhado;
        protected void SetSelectDetalhado(string select)
        {
            _SqlDetalhado = select;
        }
        public string EntidadeSqlSelectDetalhado()
        {
            return this._SqlDetalhado;
        }
        protected void SetOrderByPadrao(string orderBy)
        {
            this._OrderByPadrao = orderBy;
        }


        public string EntidadeSqlSelectCount()
        {
            string nomeEsquema = this.GetType().Namespace.Substring(this.GetType().Namespace.IndexOf(".") + 1, this.GetType().Namespace.Length - this.GetType().Namespace.IndexOf(".") - 1);
            string nomeClasse = this.GetType().Name;
            string nomeEntidade = (nomeEsquema + "." + nomeClasse).ToLower();

            string sql = "SELECT COUNT(*) FROM " + nomeEntidade + " " + MontarAlias();
            return sql;
        }
        public string EntidadeSqlSelectTabelaPrincipal()
        {
            string nomeEsquema = this.GetType().Namespace.Substring(this.GetType().Namespace.IndexOf(".") + 1, this.GetType().Namespace.Length - this.GetType().Namespace.IndexOf(".") - 1);
            string nomeClasse = this.GetType().Name;
            string nomeEntidade = (nomeEsquema + "." + nomeClasse).ToLower();

            string sql = "SELECT * FROM " + nomeEntidade + " " + MontarAlias();
            return sql;
        }

        public string EntidadeSqlWhere()
        {
            CarregarParametrosWhere();

            string auxWhere = "";
            string retorno = "";

            foreach (Where item in ListWhere)
            {
                string customClause = item._CustomClause;
                string campo = item._Column;
                object parametro = item._Parameter;
                WhereOptions? option = item._Option;

                Exception exeptionTamanhoMatriz = new Exception("Matriz de intervalo não possui tamanho 2.");

                if (customClause != null && !customClause.Trim().Equals(""))
                {
                    retorno += customClause;
                }
                else if (ParametroEhValido(parametro))
                {
                    Type tipo = parametro.GetType();

                    DateTime dt = new DateTime();
                    if (DateTime.TryParse(parametro.ToString(), out dt) && new int[] { 10, 19 }.Contains(parametro.ToString().Length))
                        tipo = dt.GetType();

                    if (tipo.Equals(typeof(Object[,])))
                    {
                        if (((Object[,])parametro).Length == 2)
                            retorno += " AND " + campo + " BETWEEN " + ((Object[,])parametro)[0, 0] + " AND " + ((Object[,])parametro)[0, 1];
                        else
                            throw exeptionTamanhoMatriz;
                    }
                    else if (tipo.Equals(typeof(DateTime[,])))
                    {
                        if (((DateTime[,])parametro).Length == 2)
                        {
                            retorno += " AND " + campo + " BETWEEN to_date('" + ((DateTime[,])parametro)[0, 0] + "', 'dd/mm/yyyy hh24:mi:ss') AND to_date('" + ((DateTime[,])parametro)[0, 1] + "', 'dd/mm/yyyy hh24:mi:ss')";
                        }
                        else
                            throw exeptionTamanhoMatriz;
                    }
                    else if (tipo.Equals(typeof(DateTime[])))
                    {
                        if (((DateTime[])parametro).Length == 2)
                        {
                            retorno += " AND " + campo + " BETWEEN to_date('" + ((DateTime[])parametro)[0] + "', 'dd/mm/yyyy hh24:mi:ss') AND to_date('" + ((DateTime[])parametro)[1] + "', 'dd/mm/yyyy hh24:mi:ss')";
                        }
                        else
                            throw exeptionTamanhoMatriz;
                    }
                    else if (tipo.Equals(typeof(Intervalo)))
                    {
                        Intervalo itv = (Intervalo)parametro;

                        DateTime dtResult;
                        bool isDateTime = false;

                        if (itv._Min != null && !itv._Min.ToString().Trim().Equals(""))
                        {
                            isDateTime = DateTime.TryParse(itv._Min.ToString(), out dtResult);
                            if (isDateTime)
                            {
                                if (itv._Min.ToString().Length == 10)
                                    retorno += " AND trunc(" + campo + ") >= '" + itv._Min + "'";
                                else
                                    retorno += " AND " + campo + " >= to_date('" + itv._Min + "', 'dd/mm/yyyy hh24:mi:ss')";
                            }
                            else
                            {
                                retorno += " AND " + campo + " >= " + itv._Min;
                            }
                        }

                        if (itv._Max != null && !itv._Max.ToString().Trim().Equals(""))
                        {
                            isDateTime = DateTime.TryParse(itv._Max.ToString(), out dtResult);
                            if (isDateTime)
                            {
                                if (itv._Max.ToString().Length == 10)
                                    retorno += " AND trunc(" + campo + ") <= '" + itv._Max + "'";
                                else
                                    retorno += " AND " + campo + " <= to_date('" + itv._Max + "', 'dd/mm/yyyy hh24:mi:ss')";
                            }
                            else
                            {
                                retorno += " AND " + campo + " <= " + itv._Max;
                            }
                        }
                    }
                    else if (tipo.Equals(typeof(List<object>)))
                    {
                        if (((List<object>)parametro).Count > 0)
                        {
                            if (option == WhereOptions.ListIn)
                                auxWhere = " IN ";
                            else if (option == WhereOptions.ListNotIn)
                                auxWhere = " NOT IN ";

                            retorno += " AND " + campo + auxWhere + Classes.Uteis.Diversos.MontarList((List<object>)parametro);
                        }
                    }
                    else if (tipo.Equals(typeof(DateTime)))
                    {
                        if (parametro.ToString().Length == 10)
                            retorno += " AND " + campo + " = to_date('" + parametro + "', 'dd/mm/yyyy')";
                        else
                            retorno += " AND " + campo + " = to_date('" + parametro + "', 'dd/mm/yyyy hh24:mi:ss')";
                    }
                    else if (tipo.Equals(typeof(string)))
                    {
                        if (parametro.ToString().ToUpper().Contains("IS NULL") ||
                            parametro.ToString().ToUpper().Contains("IS NOT NULL"))
                        {
                            retorno += " AND " + campo + " " + parametro.ToString().ToUpper();
                        }
                        else if (option == WhereOptions.LikeIni)
                        {
                            retorno += " AND upper(" + campo + ") LIKE '" + parametro.ToString().Trim().ToUpper() + "%'";
                        }
                        else if (option == WhereOptions.LikeFim)
                        {
                            retorno += " AND upper(" + campo + ") LIKE '%" + parametro.ToString().Trim().ToUpper() + "'";
                        }
                        else if (option == WhereOptions.Like)
                        {
                            retorno += " AND upper(" + campo + ") LIKE '%" + parametro.ToString().Trim().ToUpper() + "%'";
                        }
                        else
                        {
                            retorno += " AND " + campo + " = '" + parametro + "'";
                        }
                    }
                    else if (!parametro.ToString().Trim().Equals(""))
                        retorno += " AND " + campo + " = " + parametro;
                }
            }

            foreach (string item in ListWherePersonalizado)
            {
                if (!item.Trim().Equals(""))
                    retorno += " AND " + item;
            }

            if (!retorno.Equals(""))
            {
                retorno = retorno.Substring(4, retorno.Length - 4).Replace("\r\n", "");

                while (retorno.Contains("  "))
                {
                    retorno = retorno.Replace("  ", " ");
                }
                retorno = retorno.Replace("AND AND", "AND");


                string s = retorno.Substring(0, retorno.IndexOf("AND") + 3).Replace(" ", "");
                if (s.Equals("AND"))
                    retorno = retorno.Substring(retorno.IndexOf("AND") + 3, retorno.Length - retorno.IndexOf("AND") - 3);



                retorno = " WHERE" + retorno;
            }

            return retorno;
        }
        public string EntidadeSqlOrderBy()
        {
            string orderBy = "";
            if (ParametroEhValido(this._OrderByPersonalizado))
                orderBy = " ORDER BY " + this._OrderByPersonalizado.ToUpper().Replace("ORDER BY", "");
            else if (ParametroEhValido(this._OrderByPadrao))
                orderBy = " ORDER BY " + this._OrderByPadrao.ToUpper().Replace("ORDER BY", "");

            return orderBy;
        }

    }
}