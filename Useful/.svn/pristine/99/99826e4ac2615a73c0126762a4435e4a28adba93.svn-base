using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace System.Windows.Forms.Uniube
{
    public static class WaitWindow
    {
        private static object lockObject = new object();
        private static string message = string.Empty;
        private static Form waitScreen;

        public static void Begin(string msg)
        {
            if (IsShowing)
            {
                End();
            }
            if (!string.IsNullOrEmpty(msg))
            {
                message = msg;
            }
            using (ManualResetEvent event2 = new ManualResetEvent(false))
            {
                Thread thread = new Thread(new ParameterizedThreadStart(ThreadStart));
                thread.SetApartmentState(ApartmentState.STA);
                thread.Start(event2);
                event2.WaitOne();
            }
        }

        public static void Begin()
        {
            if (IsShowing)
            {
                End();
            }
            using (ManualResetEvent event2 = new ManualResetEvent(false))
            {
                Thread thread = new Thread(new ParameterizedThreadStart(ThreadStart));
                thread.SetApartmentState(ApartmentState.STA);
                thread.Start(event2);
                event2.WaitOne();
            }
        }

        public static void End()
        {
            lock (lockObject)
            {
                if (IsShowing)
                {
                    if (waitScreen.Created)
                    {
                        try
                        {
                            waitScreen.Invoke(new MethodInvoker(CloseWindow));
                        }
                        catch (NullReferenceException nREx)
                        {
                            //throw new Exception("Erro ao chamar waitScreen.Invoke null reference - WaitWindow: " + nREx.Message);
                        }
                        catch (Exception ex)
                        {
                            //throw new Exception("Erro ao chamar waitScreen.Invoke exception - WaitWindow: " + ex.Message);
                        }
                    }
                    waitScreen = null;
                }
            }
        }

        private static void CloseWindow()
        {
            waitScreen.Dispose();
        }

        private static void ThreadStart(object parameter)
        {
            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.ThrowException);
            ManualResetEvent event2 = (ManualResetEvent)parameter;
            Application.EnableVisualStyles();
            waitScreen = new frmAguarde(message);
            waitScreen.Tag = event2;
            waitScreen.FormClosing += new FormClosingEventHandler(WaitScreenClosing);
            waitScreen.Shown += new EventHandler(WaitScreenShown);
            Application.Run(waitScreen);
            Application.ExitThread();
        }

        private static void WaitScreenClosing(object sender, FormClosingEventArgs e)
        {
            if (e.CloseReason == CloseReason.UserClosing)
            {
                e.Cancel = true;
            }
        }

        private static void WaitScreenShown(object sender, EventArgs e)
        {
            Form form = (Form)sender;
            form.Shown -= new EventHandler(WaitScreenShown);
            ManualResetEvent tag = (ManualResetEvent)form.Tag;
            form.Tag = null;
            tag.Set();
        }

        public static bool IsShowing
        {
            get
            {
                return (waitScreen != null);
            }
        }

    }
}
