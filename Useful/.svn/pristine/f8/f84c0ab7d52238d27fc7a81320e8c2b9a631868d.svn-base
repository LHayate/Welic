using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Windows.Forms.Uniube;
using System.Windows.Forms.Uniube.RecursosGenericos;


namespace System.Windows.Forms.Uniube.RecursosGenericos
{
    [ToolboxBitmap(@"S:\Sistemas dotNet\Figuras\intervalo.ico")]
    public partial class Intervalo1 : UserControl
    {
        /// <summary>
        /// Retorna true caso os dois campos (txtInicial e txtFinal) contenham valor, e false se pelo menos um dos campos for vazio
        /// O retorno true está condicionado também ao CheckBox estar marcado.
        /// </summary>
        public bool Preenchido()
        {
            bool retorno = false;

            if (chkTitulo.Checked &&
                !txtInicial.Text.Trim().Equals("") &&
                !txtFinal.Text.Trim().Equals(""))
                retorno = true;

            return retorno;
        }

        private string _textChk = "<titulo>";
        public string TextCheck
        {
            get { chkTitulo.Text = _textChk; return _textChk; }
            set { chkTitulo.Text = value; _textChk = value; }
        }

        public bool _LimparTxt = true;

        private Entidades _Entidade;
        private string _ColunaPK;
        private string _ColunaDescricao;
        private string _TituloJanela;
        private bool _AutoExecutarF3 = true;

        private ToolTip toolTipInformacao = new ToolTip();

        public Intervalo1()
        {
            InitializeComponent();

            chkTitulo.Checked = false;
            txtInicial.Enabled = chkTitulo.Checked;
            txtFinal.Enabled = chkTitulo.Checked;
        }

        public Intervalo GetIntervalo()
        {
            Intervalo itv = new Intervalo(null, null);

            if (chkTitulo.Checked)
            {
                if (!txtInicial.Text.Trim().Equals("") && !txtInicial.Text.Trim().Equals(""))
                    itv = new Intervalo(txtInicial.Text.Trim(), txtFinal.Text.Trim());
            }

            return itv;
        }
        public void SetF3(Entidades entidade, string colunaPK, string colunaDescricao, string tituloJanela = "Buscar", bool autoExecutar = true)
        {
            _Entidade = entidade;
            _ColunaPK = colunaPK;
            _ColunaDescricao = colunaDescricao;
            _AutoExecutarF3 = autoExecutar;
            _TituloJanela = tituloJanela;
        }

        private void chkTitulo_CheckedChanged(object sender, EventArgs e)
        {
            txtInicial.Enabled = chkTitulo.Checked;
            txtFinal.Enabled = chkTitulo.Checked;

            if (chkTitulo.Checked)
            {
                txtInicial.Focus();
                txtInicial.SelectAll();
            }
        }
        private void chkTitulo_EnabledChanged(object sender, EventArgs e)
        {
            chkTitulo_CheckedChanged(sender, e);
        }

        private void KeyDownGenerico(KeyEventArgs e, TextBoxUniube txt)
        {
            if (e.KeyCode == Keys.F3 && _Entidade != null)
            {
                FormBusca3 frm = new FormBusca3(_Entidade, _ColunaDescricao, _AutoExecutarF3, _TituloJanela);
                frm.ShowDialog();
                txt.Text = frm.GetRetorno(_ColunaPK);

                if (!_ColunaDescricao.Equals(""))
                    txt.Tag = frm.GetRetorno(_ColunaDescricao);
            }
        }
        private void LeaveGenerico(TextBoxUniube txt, bool LimparCampos)
        {
            if (!txt.Text.Trim().Equals("") && _Entidade != null)
            {
                _Entidade.GetType().GetProperty("_" + _ColunaPK.ToUpper()).SetValue(_Entidade, txt.Text, null);
                DataTable dt = _Entidade.BuscarDetalhado();
                _Entidade.GetType().GetProperty("_" + _ColunaPK.ToUpper()).SetValue(_Entidade, null, null);

                if (dt.Rows.Count == 0 && LimparCampos)
                {
                    txt.Text = "";
                    txt.Tag = "";
                }
                else if (dt.Rows.Count > 0)
                {
                    if (!_ColunaDescricao.Equals(""))
                        txt.Tag = dt.Rows[0][_ColunaDescricao].ToString();
                }
            }
            else if (LimparCampos)
            {
                txt.Tag = "";
            }

            txtInicial_MouseLeave(null, null);
        }

        private void txtInicial_KeyDown(object sender, KeyEventArgs e)
        {
            KeyDownGenerico(e, txtInicial);
        }
        private void txtInicial_Leave(object sender, EventArgs e)
        {
            LeaveGenerico(txtInicial, _LimparTxt);

            if (txtFinal.Text.Trim().Equals(""))
            {
                txtFinal.SelectAll();
                txtFinal.Text = txtInicial.Text;
                txtFinal_Leave(null, null);
            }
        }
        private void txtInicial_TextChanged(object sender, EventArgs e)
        {
            if (txtInicial.Text.Trim().Equals(""))
            {
                txtFinal.Text = "";
                txtInicial.Focus();
            }

            LeaveGenerico(txtInicial, false);
            txtInicial_MouseEnter(null, null);
        }
        private void txtInicial_MouseEnter(object sender, EventArgs e)
        {
            if (txtInicial.Tag == null || txtInicial.Text.Trim().Equals(""))
            {
                toolTipInformacao.RemoveAll();
                toolTipInformacao.Hide(this);
            }
            else
            {
                toolTipInformacao.ToolTipIcon = ToolTipIcon.None;
                toolTipInformacao.IsBalloon = false;
                toolTipInformacao.UseAnimation = true;
                toolTipInformacao.UseFading = true;
                toolTipInformacao.ToolTipTitle = string.Empty;

                Point controlLoc = this.PointToScreen(txtInicial.Location);
                int x = controlLoc.X - this.ParentForm.Location.X + txtInicial.Width - 2;
                int y = controlLoc.Y - this.ParentForm.Location.Y - chkTitulo.Height - 7;
                toolTipInformacao.Show(txtInicial.Tag.ToString().Trim(), this.ParentForm, x, y);
            }
        }
        private void txtInicial_MouseLeave(object sender, EventArgs e)
        {
            toolTipInformacao.RemoveAll();
            toolTipInformacao.Hide(this);
        }

        private void txtFinal_KeyDown(object sender, KeyEventArgs e)
        {
            KeyDownGenerico(e, txtFinal);

            if (e.KeyCode == Keys.Enter)
            {
                LeaveGenerico(txtFinal, _LimparTxt);
            }
        }
        private void txtFinal_Leave(object sender, EventArgs e)
        {
            LeaveGenerico(txtFinal, _LimparTxt);
        }
        private void txtFinal_TextChanged(object sender, EventArgs e)
        {
            LeaveGenerico(txtFinal, false);
            txtFinal_MouseEnter(null, null);
        }
        private void txtFinal_MouseEnter(object sender, EventArgs e)
        {
            if (txtFinal.Tag == null || txtFinal.Text.Trim().Equals(""))
            {
                toolTipInformacao.RemoveAll();
                toolTipInformacao.Hide(this);
            }
            else
            {
                toolTipInformacao.ToolTipIcon = ToolTipIcon.None;
                toolTipInformacao.IsBalloon = false;
                toolTipInformacao.UseAnimation = true;
                toolTipInformacao.UseFading = true;
                toolTipInformacao.ToolTipTitle = string.Empty;
                toolTipInformacao.ShowAlways = false;

                Point controlLoc = this.PointToScreen(txtFinal.Location);
                int x = controlLoc.X - this.ParentForm.Location.X + txtFinal.Width - 2;
                int y = controlLoc.Y - this.ParentForm.Location.Y + 1;

                toolTipInformacao.Show(txtFinal.Tag.ToString().Trim(), this.ParentForm, x, y);
            }
        }
        private void txtFinal_MouseLeave(object sender, EventArgs e)
        {
            toolTipInformacao.RemoveAll();
            toolTipInformacao.Hide(this);
            //txtInicial_MouseLeave(null, null);
        }
    }
}
