using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.OracleClient;
using Classes.Entity;
using Classes.Dal;

namespace System.Windows.Forms.Uniube
{
    public partial class FormBuscaPaginacao : FormUniube
    {
        private string _sql;
        private List<OracleParameter> _parametros;
        private string _mensagemSemRegistro;
        //private bool _removerAcentuacao;
        private string _orderBy;
        public DataRow retorno;
        private DataTable _dtPesquisaTotal;
        private DataTable _dtPesquisaFiltrada;
        public int _Pagina
        {
            set
            {
                tstxtPagina.Text = value.ToString();
                Pagina = value;
            }
        }
        private int Pagina;
        public int _QtdeRegistrosPagina
            {
            set
            {
                if (value > 0)
                    QtdeRegistrosPagina = value;
                else if (_QtdeRegistrosPaginaConstante > 0)
                    QtdeRegistrosPagina = _QtdeRegistrosPaginaConstante;
                else
                    QtdeRegistrosPagina = 20;

                tstxtRegistrosPorPagina.Text = QtdeRegistrosPagina.ToString();
            }
            get
            {
                return QtdeRegistrosPagina;
            }
        }
        private int QtdeRegistrosPagina;
        private int _QtdeRegistrosPaginaConstante;

        private DataTable _ColunasData;
        private Boolean _AutoExecutar;
        private bool validaFiltros = false;
         
        public FormBuscaPaginacao(string pSQL, List<OracleParameter> pListaParametros,Boolean pAutoExecutar, string pTitulo, string pColunaPrincipal, string pFiltroAutomatico, 
                                  string pMensagemSemRegistro, string pOrderBy, int pQtdeRegistrosPorPagina)

        {
            InitializeComponent();

            _orderBy = pOrderBy;
            _sql = " select * from ( " + pSQL + @") " + (string.IsNullOrEmpty(_orderBy) || string.IsNullOrWhiteSpace(_orderBy) ? "" : " order by " + _orderBy);
            _parametros = pListaParametros;
            _mensagemSemRegistro = pMensagemSemRegistro;
            //_removerAcentuacao = removerAcentuacao;
            retorno = null;
            QtdeRegistrosPagina = pQtdeRegistrosPorPagina;
            _QtdeRegistrosPaginaConstante = QtdeRegistrosPagina;


            _AutoExecutar = pAutoExecutar;

            
            // Preencher o Título do Formulário
            if (!string.IsNullOrEmpty(pTitulo) && !string.IsNullOrWhiteSpace(pTitulo))
                this.Text = pTitulo;
            else
                this.Text = "Busca de Registro";

            ExecutarPesquisa();

            if (_dtPesquisaTotal == null || _dtPesquisaTotal.Rows.Count == 0)
            {
                MessageBox.Show("A pesquisa não retornou registros.", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                this.Dispose();
            }
            else
            {
                PreencheComboColuna(pColunaPrincipal);

                PreencheCampoFiltro(pFiltroAutomatico);

                PreencheGrid();
            }
        }

        public FormBuscaPaginacao(string pSQL, List<OracleParameter> pListaParametros, string pTitulo, string colunaPrincipal)
            : this(pSQL, pListaParametros,false, pTitulo, colunaPrincipal, string.Empty, "Nenhum registro encontrado.", string.Empty, 20)
        { }

        public FormBuscaPaginacao(string pSQL, List<OracleParameter> pListaParametros, string pTitulo, string colunaPrincipal, string orderBy)
            : this(pSQL, pListaParametros,false, pTitulo, colunaPrincipal, string.Empty, "Nenhum registro encontrado.", orderBy, 20)
        { }

        public FormBuscaPaginacao(string pSQL, List<OracleParameter> pListaParametros, bool pAutoExecutar, string pTitulo, string pColunaPrincipal, string pFiltroAutomatico, 
                                  string pMensagemSemRegistro, bool pRemoverAcentuacao, string pOrderBy)
            : this(pSQL, pListaParametros,pAutoExecutar, pTitulo, pColunaPrincipal, pFiltroAutomatico, pMensagemSemRegistro, pOrderBy, 20)
        {
        }

        public FormBuscaPaginacao(string pSQL, List<OracleParameter> pListaParametros, bool pAutoExecutar, string pTitulo, string pColunaPrincipal, string pFiltroAutomatico, 
                                  string pMensagemSemRegistro)
            : this(pSQL, pListaParametros,pAutoExecutar, pTitulo, pColunaPrincipal, pFiltroAutomatico, pMensagemSemRegistro, string.Empty, 20)
        { }

        public FormBuscaPaginacao(string pSQL, List<OracleParameter> pListaParametros, bool pAutoExecutar, string pTitulo, string pColunaPrincipal, string pFiltroAutomatico, 
                                  string pMensagemSemRegistro, bool pRemoverAcentuacao)
            : this(pSQL, pListaParametros,pAutoExecutar, pTitulo, pColunaPrincipal, pFiltroAutomatico, pMensagemSemRegistro, string.Empty, 20)

        { }


        private void PreencheComboColuna(string colunaPrincipal)
        {
            DataTable dtColunas = new DataTable();
            DataRow dr;
            dtColunas.Columns.Add("COLUNA");
            dtColunas.Columns.Add("TIPO");
            cboColuna.DisplayMember = "COLUNA";
            cboColuna.ValueMember = "TIPO";

            // Se a coluna principal não for informada, será a primeira da pesquisa
            if(!string.IsNullOrEmpty(colunaPrincipal))
                colunaPrincipal = colunaPrincipal.ToUpper();
            else
                colunaPrincipal = _dtPesquisaTotal.Columns[0].ColumnName.ToUpper();

            // Coluna principal será a primeira do filtro
            if (!string.IsNullOrEmpty(colunaPrincipal) && !string.IsNullOrWhiteSpace(colunaPrincipal))
            {
                if (this._dtPesquisaTotal.Columns[colunaPrincipal] != null)
                {
                    dr = dtColunas.NewRow();
                    dr["COLUNA"] = colunaPrincipal;
                    dr["TIPO"] = this._dtPesquisaTotal.Columns[colunaPrincipal].DataType;
                    dtColunas.Rows.Add(dr);
                }
            }

            foreach (DataColumn dc in this._dtPesquisaTotal.Columns)
            {
                // adicionar o restante das colunas
                if (colunaPrincipal != dc.ColumnName)
                {
                    dr = dtColunas.NewRow();
                    dr["COLUNA"] = dc.ColumnName;
                    dr["TIPO"] = this._dtPesquisaTotal.Columns[dc.ColumnName].DataType;
                    dtColunas.Rows.Add(dr);
                }
            }

          
            cboColuna.DataSource = dtColunas;
        }

        private void PreencheCampoFiltro(string filtroAutomatico)
        {
            if (!string.IsNullOrEmpty(filtroAutomatico) && !string.IsNullOrWhiteSpace(filtroAutomatico))
            {
                switch (cboColuna.SelectedValue.ToString())
                {
                    case "System.DateTime":
                        DateTime dtFiltro = new DateTime();
                        try
                        {
                            dtFiltro = DateTime.Parse(filtroAutomatico).Date;
                            dtpFiltro.Value = dtFiltro.Date;
                        }
                        catch (Exception)
                        {
                            MessageBox.Show("Formato de Data Inválido!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        break;
                    case "System.Decimal":
                        decimal dcFiltro = new decimal();
                        try
                        {
                            dcFiltro = Decimal.Parse(filtroAutomatico);
                            txtFiltro.Text = dcFiltro.ToString();
                        }
                        catch (Exception)
                        {
                            MessageBox.Show("Formato Númerico Inválido!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        break;
                    default:
                        txtFiltro.Text = filtroAutomatico;
                        break;
                }
            }
        }

        private void HabilitarBotoesPaginacao()
        {
            tsBtnAnterior.Enabled = tstxtPagina.Text != "1";
            tsBtnPrimeiraPagina.Enabled = tstxtPagina.Text != "1";
            tsBtnProximo.Enabled = tstxtPagina.Text != tsLabelTotalPaginas.Text;
            tsBtnUltimaPagina.Enabled = tstxtPagina.Text != tsLabelTotalPaginas.Text;
        }

        private void ExecutarPesquisa()
        {
            Conexao dal = new Conexao(Globals.GetStringConnection(), 2);

            if (_parametros != null && _parametros.Count > 0)
                foreach (OracleParameter p in _parametros)
                    dal.AddParam(p.ParameterName, p.Value);

            this._dtPesquisaTotal = dal.ExecuteQuery(_sql);
        }

        private DataTable FiltrarPesquisa()
        {
            DataTable dt = _dtPesquisaTotal.Copy();
            string tipoFiltro = cboColuna.SelectedValue.ToString();
            string coluna = ((DataTable)cboColuna.DataSource).Rows[cboColuna.SelectedIndex]["COLUNA"].ToString();

            switch (cboCondicao.SelectedValue.ToString())
            {
                case "=": //Igual
                    if (tipoFiltro == "System.DateTime")
                    {
                        var b = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<DateTime>(coluna).ToShortDateString().Equals(dtpFiltro.Value.ToShortDateString())
                                select l;

                        dt = b.Count() > 0 ? b.CopyToDataTable() : dt.Clone();
                    }
                    else if(txtFiltro.ContemValor())
                    {
                        var a = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<object>(coluna).ToString().ToUpper().Equals(txtFiltro.Text.ToUpper())
                                select l;

                        dt = a.Count() > 0 ? a.CopyToDataTable() : dt.Clone();
                    }

                    return dt;
                case "<>": // Diferente
                    if (tipoFiltro == "System.DateTime")
                    {
                        var b = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where !l.Field<DateTime>(coluna).ToShortDateString().Equals(dtpFiltro.Value.ToShortDateString())
                                select l;

                        dt = b.Count() > 0 ? b.CopyToDataTable() : dt.Clone();
                    }
                    else if (txtFiltro.ContemValor())
                    {
                        var a = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where !l.Field<object>(coluna).ToString().ToUpper().Equals(txtFiltro.Text.ToUpper())
                                select l;

                        dt = a.Count() > 0 ? a.CopyToDataTable() : dt.Clone();
                    }

                    return dt;
                case ">": // Maior
                    if (tipoFiltro == "System.DateTime")
                    {
                        var b = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<DateTime>(coluna) > DateTime.Parse(dtpFiltro.Value.ToShortDateString())
                                select l;

                        dt = b.Count() > 0 ? b.CopyToDataTable() : dt.Clone();
                    }
                    else if (txtFiltro.ContemValor())
                    {
                        var a = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where double.Parse(l.Field<object>(coluna).ToString().ToUpper()) > double.Parse(txtFiltro.Text.ToUpper())
                                select l;

                        dt = a.Count() > 0 ? a.CopyToDataTable() : dt.Clone();
                    }
                    return dt;
                case ">=": // Maior ou Igual
                    if (tipoFiltro == "System.DateTime")
                    {
                        var b = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<DateTime>(coluna) >= DateTime.Parse(dtpFiltro.Value.ToShortDateString())
                                select l;

                        dt = b.Count() > 0 ? b.CopyToDataTable() : dt.Clone();
                    }
                    else if (txtFiltro.ContemValor())
                    {
                        var a = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<object>(coluna).ToString().ToUpper().CompareTo(txtFiltro.Text.ToUpper()) >= 0
                                select l;

                        dt = a.Count() > 0 ? a.CopyToDataTable() : dt.Clone();
                    }
                    return dt;
                case "<": // Menor
                    if (tipoFiltro == "System.DateTime")
                    {
                        var b = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<DateTime>(coluna) < DateTime.Parse(dtpFiltro.Value.ToShortDateString())
                                select l;

                        dt = b.Count() > 0 ? b.CopyToDataTable() : dt.Clone();
                    }
                    else if (txtFiltro.ContemValor())
                    {
                        var a = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where double.Parse(l.Field<object>(coluna).ToString().ToUpper()) < double.Parse(txtFiltro.Text.ToUpper())
                                select l;

                        dt = a.Count() > 0 ? a.CopyToDataTable() : dt.Clone();
                    }
                    return dt;
                case "<=": // Menor Igual
                    if (tipoFiltro == "System.DateTime")
                    {
                        var b = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<DateTime>(coluna) <= DateTime.Parse(dtpFiltro.Value.ToShortDateString())
                                select l;

                        dt = b.Count() > 0 ? b.CopyToDataTable() : dt.Clone();
                    }
                    else if (txtFiltro.ContemValor())
                    {
                        var a = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where double.Parse(l.Field<object>(coluna).ToString().ToUpper()) <= double.Parse(txtFiltro.Text.ToUpper())
                                select l;
                        
                        dt = a.Count() > 0 ? a.CopyToDataTable() : dt.Clone();
                    }
                    return dt;
                case "L": // Like
                    if (txtFiltro.ContemValor())
                    {
                        var d = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<string>(coluna).ToString().ToUpper().Contains(txtFiltro.Text.ToUpper())
                                select l;

                        dt = d.Count() > 0 ? d.CopyToDataTable() : dt.Clone();
                    }
                    
                    return dt;
                case "!L": // Not like
                    if (txtFiltro.ContemValor())
                    {
                        var c = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where !l.Field<string>(coluna).ToString().ToUpper().Contains(txtFiltro.Text.ToUpper())
                                select l;

                        dt = c.Count() > 0 ? c.CopyToDataTable() : dt.Clone();
                    }
                    
                    return dt;
                case "B": // Between

                    if (tipoFiltro == "System.DateTime")
                    {
                        var b = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where l.Field<DateTime>(coluna) >= DateTime.Parse(dtpFiltro.Value.ToShortDateString()) &&
                                      l.Field<DateTime>(coluna) <= DateTime.Parse(dtpFiltroEntre.Value.ToShortDateString())
                                select l;

                        dt = b.Count() > 0 ? b.CopyToDataTable() : dt.Clone();
                    }
                    else if(txtFiltroEntre1.ContemValor() && txtFiltroEntre2.ContemValor())
                    {
                        var a = from l in _dtPesquisaTotal.AsEnumerable().Where(x => x.Field<object>(coluna) != null)
                                where double.Parse(l.Field<object>(coluna).ToString().ToUpper())  >= double.Parse(txtFiltroEntre1.Text.ToUpper()) &&
                                      double.Parse(l.Field<object>(coluna).ToString().ToUpper()) <= double.Parse(txtFiltroEntre2.Text.ToUpper())
                                select l; 

                        dt = a.Count() > 0 ? a.CopyToDataTable() : dt.Clone();
                    }
                    return dt;

                default:
		            MessageBox.Show("Condição não implementada. Contate o Administrador do Sistema para verificar o problema.", "Informação", MessageBoxButtons.OK, MessageBoxIcon.Information); 
                    break;
            }

            return null;
        }
        private void PreencheGrid()
        {
            this._dtPesquisaFiltrada = FiltrarPesquisa();

            tsLabelTotalPaginas.Text = (Math.Ceiling(((double)_dtPesquisaFiltrada.Rows.Count / (double)this._QtdeRegistrosPagina))).ToString();

            SelecionarPagina(1);

            AjustarTamanhoFormulario();
        }

        private void PreencheRetorno()
        {
            if (dgvLista.CurrentRow != null)
            {
                DataRowView currentDataRowView = (DataRowView)dgvLista.CurrentRow.DataBoundItem;
                DataRow row = currentDataRowView.Row;
                retorno = row;
            }
            this.Dispose();
        }

        private void AjustarTamanhoFormulario()
        {
            int totalWidth = 150;
            int totalHeigth = 250;

            //Largura
            foreach (DataGridViewColumn item in dgvLista.Columns)
            {
                //item.AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;

                if (item.Visible)
                    totalWidth += item.Width;
            }
            if (totalWidth > 1040)
                totalWidth = 1040;
            else if (totalWidth < 735)
                totalWidth = 800;

            //Altura
            foreach (DataGridViewRow item in dgvLista.Rows)
            {
                if (item.Visible)
                    totalHeigth += item.Height;
            }
            if (totalHeigth > 700)
                totalHeigth = 700;
            else if (totalHeigth < 400)
                totalHeigth = 400;


            //Centralizar o formulario após a alteração do tamanho
            this.Location = new Point((Screen.PrimaryScreen.WorkingArea.Width - totalWidth) / 2,
                      (Screen.PrimaryScreen.WorkingArea.Height - totalHeigth) / 2);

            this.Width = totalWidth;
            this.Height = totalHeigth;

        }

        private void SelecionarPagina(int pPagina)
        {
            if (_dtPesquisaFiltrada != null && _dtPesquisaFiltrada.Rows.Count > 0)
            {
                var linhas = from l in _dtPesquisaFiltrada.AsEnumerable()
                             where _dtPesquisaFiltrada.Rows.IndexOf(l) >= _QtdeRegistrosPagina * pPagina - _QtdeRegistrosPagina &&
                                   _dtPesquisaFiltrada.Rows.IndexOf(l) <= _QtdeRegistrosPagina * pPagina - 1
                             select l;

                if (linhas.Count() > 0)
                {
                    dgvLista.DataSource = linhas.CopyToDataTable();
                    _Pagina = pPagina;
                }
                else if (pPagina != 1)
                {
                    SelecionarPagina(1);
                }
                else
                {
                    dgvLista.DataSource = _dtPesquisaTotal.Clone();
                    _Pagina = pPagina;
                }
            }
            else
            {
                dgvLista.DataSource = _dtPesquisaTotal.Clone();
                _Pagina = pPagina;
            }

            HabilitarBotoesPaginacao();
        }
        private void AlterarQuantidadeRegistrosPagina(int pQuantidade)
        {
            _QtdeRegistrosPagina = pQuantidade;

            PreencheGrid();
        }

        private void txtFiltro_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }

        private void dtpFiltro_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }

        private void txtFiltroEntre1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }

        private void txtFiltroEntre2_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }

        private void dtpFiltroEntre_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }

        private void tstxtPagina_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(tstxtPagina.Text) && !string.IsNullOrWhiteSpace(tstxtPagina.Text))
            {
                SelecionarPagina(int.Parse(tstxtPagina.Text));
            }
        }
        private void tstxtPagina_TextChanged(object sender, EventArgs e)
        {
            
        }
        private void tstxtPagina_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                tstxtPagina_Leave(null, null);
        }

        private void tsBtnAnterior_Click(object sender, EventArgs e)
        {
            SelecionarPagina(int.Parse(tstxtPagina.Text) - 1);
        }
        private void tsBtnProximo_Click(object sender, EventArgs e)
        {
            SelecionarPagina(int.Parse(tstxtPagina.Text) + 1);
        }
        private void tsBtnUltimaPagina_Click(object sender, EventArgs e)
        {
            SelecionarPagina(int.Parse(tsLabelTotalPaginas.Text));
        }
        private void tsBtnPrimeiraPagina_Click(object sender, EventArgs e)
        {
            SelecionarPagina(1);
        }

        private void tstxtRegistrosPorPagina_Leave(object sender, EventArgs e)
        {
            if (!tstxtRegistrosPorPagina.Text.Equals(this._QtdeRegistrosPagina.ToString()))
            {
                int valor;

                if (!int.TryParse(tstxtRegistrosPorPagina.Text, out valor))
                    AlterarQuantidadeRegistrosPagina(this._QtdeRegistrosPaginaConstante);
                else
                    AlterarQuantidadeRegistrosPagina(valor);
            }
        }
        private void tstxtRegistrosPorPagina_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && !tstxtRegistrosPorPagina.Text.Equals(this._QtdeRegistrosPagina.ToString()))
            {
                int valor;

                if (!int.TryParse(tstxtRegistrosPorPagina.Text, out valor))
                    AlterarQuantidadeRegistrosPagina(this._QtdeRegistrosPaginaConstante);
                else
                    AlterarQuantidadeRegistrosPagina(valor);
            }
        }

        private void dgvLista_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            AtualizarLabelResultadoBusca();
        }
        private void dgvLista_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            AtualizarLabelResultadoBusca();
        }
        private void dgvLista_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            PreencheRetorno();
        }
        private void dgvLista_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
            {
                PreencheRetorno();
            }
        }

        private void AtualizarLabelResultadoBusca()
        {
            if (_dtPesquisaFiltrada != null)
            {
                if (_dtPesquisaFiltrada.Rows.Count > 1)
                    tsLabelResultadoBusca.Text = "Resultado da busca: " + _dtPesquisaFiltrada.Rows.Count + " itens encontrados";
                else if (_dtPesquisaFiltrada.Rows.Count == 1)
                    tsLabelResultadoBusca.Text = "Resultado da busca: 1 item encontrado";
                else
                    tsLabelResultadoBusca.Text = "Resultado da busca: nenhum registro encontrado";
            }
            else
                tsLabelResultadoBusca.Text = "Resultado da busca: nenhum registro encontrado";
            
        }

        private void cboCondicao_SelectedIndexChanged(object sender, EventArgs e)
        {
            dtpFiltro.Visible = false;
            dtpFiltroEntre.Visible = false;

            txtFiltro.Visible = false;
            txtFiltroEntre1.Visible = false;
            txtFiltroEntre2.Visible = false;

            lbEntreData.Visible = false;
            lbEntreTexto.Visible = false;

            switch (cboColuna.SelectedValue.ToString())
            {
                case ("System.Decimal"):
                    if (cboCondicao.SelectedValue.ToString() == "B")
                    {
                        txtFiltroEntre1.Visible = true;
                        txtFiltroEntre2.Visible = true;
                        lbEntreTexto.Visible = true;
                    }
                    else
                        txtFiltro.Visible = true;
                    break;
                case ("System.DateTime"):
                    dtpFiltro.Visible = true;
                    if (cboCondicao.SelectedValue.ToString() == "B")
                    {
                        dtpFiltroEntre.Visible = true;
                        lbEntreData.Visible = false;
                    }
                    break;
                case ("System.String"):
                    if (cboCondicao.SelectedValue.ToString() == "B")
                    {
                        txtFiltroEntre1.Visible = true;
                        txtFiltroEntre2.Visible = true;
                        lbEntreTexto.Visible = true;
                    }
                    else
                        txtFiltro.Visible = true;
                    break;
            }
        }
        private void cboColuna_SelectedIndexChanged(object sender, EventArgs e)
        {
            txtFiltro.Text = string.Empty;
            txtFiltroEntre1.Text = string.Empty;
            txtFiltroEntre2.Text = string.Empty;

            DataTable dtCondicao = new DataTable();
            DataRow dr = null;

            dtCondicao.Columns.Add("CONDICAO");
            dtCondicao.Columns.Add("TIPO");
            cboCondicao.DisplayMember = "CONDICAO";
            cboCondicao.ValueMember = "TIPO";

            cboCondicao.DataSource = dtCondicao;

            switch (cboColuna.SelectedValue.ToString())
            {
                case ("System.Decimal"):

                    txtFiltro.TipoValor = TextBoxUniube.CTipoValor.Numerico;
                    txtFiltroEntre1.TipoValor = TextBoxUniube.CTipoValor.Numerico;
                    txtFiltroEntre2.TipoValor = TextBoxUniube.CTipoValor.Numerico;

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É IGUAL A";
                    dr["TIPO"] = "=";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É DIFERENTE DE";
                    dr["TIPO"] = "<>";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É MAIOR DO QUE";
                    dr["TIPO"] = ">";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É MAIOR OU IGUAL A";
                    dr["TIPO"] = ">=";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É MENOR DO QUE";
                    dr["TIPO"] = "<";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É MENOR OU IGUAL A";
                    dr["TIPO"] = "<=";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "ESTÁ ENTRE";
                    dr["TIPO"] = "B";
                    dtCondicao.Rows.Add(dr);

                    break;

                case "System.DateTime":

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É IGUAL A";
                    dr["TIPO"] = "=";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É DIFERENTE DE";
                    dr["TIPO"] = "<>";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É MAIOR DO QUE";
                    dr["TIPO"] = ">";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É MAIOR OU IGUAL A";
                    dr["TIPO"] = ">=";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É MENOR DO QUE";
                    dr["TIPO"] = "<";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É MENOR OU IGUAL A";
                    dr["TIPO"] = "<=";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "ESTÁ ENTRE";
                    dr["TIPO"] = "B";
                    dtCondicao.Rows.Add(dr);

                    break;

                case "System.String":

                    txtFiltro.TipoValor = TextBoxUniube.CTipoValor.Geral;
                    txtFiltroEntre1.TipoValor = TextBoxUniube.CTipoValor.Geral;
                    txtFiltroEntre2.TipoValor = TextBoxUniube.CTipoValor.Geral;

                    //dr = dtCondicao.NewRow();
                    //dr["CONDICAO"] = "COMEÇA COM";
                    //dr["TIPO"] = "L%";
                    //dtCondicao.Rows.Add(dr);

                    //dr = dtCondicao.NewRow();
                    //dr["CONDICAO"] = "TERMINA COM";
                    //dr["TIPO"] = "%L";
                    //dtCondicao.Rows.Add(dr);

                    //dr = dtCondicao.NewRow();
                    //dr["CONDICAO"] = "CONTÉM";
                    //dr["TIPO"] = "%L%";
                    //dtCondicao.Rows.Add(dr);

                    //dr = dtCondicao.NewRow();
                    //dr["CONDICAO"] = "NÃO CONTÉM";
                    //dr["TIPO"] = "!%L%";
                    //dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "CONTÉM";
                    dr["TIPO"] = "L";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "NÃO CONTÉM";
                    dr["TIPO"] = "!L";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É IGUAL A";
                    dr["TIPO"] = "=";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "É DIFERENTE DE";
                    dr["TIPO"] = "<>";
                    dtCondicao.Rows.Add(dr);

                    dr = dtCondicao.NewRow();
                    dr["CONDICAO"] = "ESTÁ ENTRE";
                    dr["TIPO"] = "B";
                    dtCondicao.Rows.Add(dr);

                    break;
                default:
                    break;
            }
            cboCondicao.DataSource = dtCondicao;
            cboCondicao_SelectedIndexChanged(sender, e);
        }

        private void toolStripBtnSelecionar_Click(object sender, EventArgs e)
        {
            PreencheRetorno();
        }

        private void toolStripBtnFiltrar_Click(object sender, EventArgs e)
        {
            PreencheGrid();
        }

        private void toolStripBtnExcel_Click(object sender, EventArgs e)
        {
            if (dgvLista.DataSource != null && dgvLista.Rows.Count > 0)
            {
                SaveFileDialog saveDialog = new SaveFileDialog();

                saveDialog.DefaultExt = "xls";
                saveDialog.Filter = "Microsoft Excel (.xls)|*.xls|Todos Arquivos (*.*)|*.*";
                saveDialog.AddExtension = true;
                saveDialog.RestoreDirectory = true;
                saveDialog.Title = "Onde você deseja salvar o arquivos?";
                saveDialog.InitialDirectory = @"C:/";
                if (saveDialog.ShowDialog() == DialogResult.OK)
                    Classes.Uteis.ExportaExcel.ExportaParaExcel((DataTable)dgvLista.DataSource, saveDialog.FileName, true);
            }
            else
            {
                MessageBox.Show("Não existem registros para exportar.", "Informação", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public DialogResult ShowDialog()
        {
            if (!this.IsDisposed)
            {
                return base.ShowDialog();
            }

            return DialogResult.Cancel;
        }


    }
}
