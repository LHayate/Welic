using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Windows.Forms.Uniube;
using System.Data.OracleClient;
using Classes.Dal;
using Classes.Entity;
using System.IO;

namespace System.Windows.Forms.Uniube
{
    public partial class frmManutencaoPermissoes : FormUniube
    {
        private string _codPrograma;
        public string CodPrograma
        {
            get { return _codPrograma; }
            set
            {
                _codPrograma = value;
                this.lblCodPrograma.Text = value;
            }
        }

        private int _usuarioLogado;
        public int UsuarioLogado
        {
            get { return _usuarioLogado; }
            set { _usuarioLogado = value; }
        }

        private bool usuarioAdmin { get; set; }

        public frmManutencaoPermissoes()
        {
            InitializeComponent();
        }

        private DataTable retornaDataTable(StringBuilder sql)
        {
            Conexao dal = new Conexao(Globals.GetStringConnection(), 2);
            return dal.ExecuteQuery(sql.ToString());
        }

        private void LimparGrid(DataGridView dgv)
        {
            if (dgv.RowCount > 0)
            {
                //limpa a grid, caso tenha registros nela
                DataTable dt = (DataTable)dgv.DataSource;
                dt.Clear();
                dgv.DataSource = dt;
            }
        }

        private void BuscarInformacoesPrograma()
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(@"
                        SELECT P.DESCRICAO AS NM_PROGRAMA,PROGRAMA, P.SISTEMA|| ' ' || S.DESCRICAO SISTEMA, P.TIPO
                               FROM SEG.PROGRAMAS P 
                               JOIN SEG.SISTEMAS S ON(S.SISTEMA = P.SISTEMA) 
                            WHERE PROGRAMA = '" + this.CodPrograma + "'");
            DataTable dtPrograma = this.retornaDataTable(sql);

            if (dtPrograma.Rows.Count == 1)
            {
                this.lblDescricaoPrograma.Text = dtPrograma.Rows[0]["NM_PROGRAMA"].ToString();
                this.lblCodPrograma.Text = this.CodPrograma;
            }
            else
            {
                MessageBox.Show("Erro em BuscarInformacoesPrograma()");
            }
        }
        private void BuscarInformacoesUsuario()
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(@"
                        SELECT UP.ADMIN
                          FROM SEG.USUARIOS_PERMISSOES UP
                         WHERE UP.PROGRAMA = '" + this.CodPrograma + @"'
                           AND UP.USUARIO = " + this.UsuarioLogado);
            DataTable dtUsuario = this.retornaDataTable(sql);

            if (dtUsuario.Rows.Count == 1)
            {
                if (dtUsuario.Rows[0][0].ToString().Equals("1"))
                {
                    this.usuarioAdmin = true;
                }
                else
                {
                    this.usuarioAdmin = false;
                }
            }
        }

        private void PreencherGruposAcesso()
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(@"
                        SELECT GP.GRUPO, G.DESCRICAO, 
		                               (SELECT COUNT(*) FROM SEG.USUARIOS_GRUPOS UG 
		                                                     INNER JOIN SEG.USUARIOS U ON(U.USUARIO = UG.USUARIO) 
		                                WHERE UG.GRUPO = GP.GRUPO 
		                                      AND U.SITUACAO <> 0 ) AS PARTICIPANTES, 
		                               1 VISUALIZAR,  
		                               CAST(NVL(GP.INCLUIR,'0') AS INTEGER) INCLUIR,  
		                               CAST(NVL(GP.ALTERAR,'0') AS INTEGER) ALTERAR,  
		                               CAST(NVL(GP.EXCLUIR,'0') AS INTEGER) EXCLUIR,   
		                               NVL((SELECT UG.ADMIN FROM SEG.USUARIOS_GRUPOS UG WHERE UG.USUARIO = " + this._usuarioLogado + @" AND UG.GRUPO = GP.GRUPO),0) AS ADMIN 
		                        FROM SEG.GRUPOS_PROGRAMAS GP  
		                             INNER JOIN SEG.GRUPOS G ON (G.GRUPO = GP.GRUPO)  
		                        WHERE PROGRAMA = '" + this.CodPrograma + "'");
            DataTable dtGruposAcesso = this.retornaDataTable(sql);

            if (dtGruposAcesso.Rows.Count > 0)
            {
                DataTable dtGrid = new DataTable();
                dtGrid.Columns.Add("GRUPOS_GRUPO", typeof(string));
                dtGrid.Columns.Add("GRUPOS_DESCRICAO", typeof(string));
                dtGrid.Columns.Add("GRUPOS_PARTICIPANTES", typeof(string));
                dtGrid.Columns.Add("GRUPOS_INSERIR", typeof(bool));
                dtGrid.Columns.Add("GRUPOS_ALTERAR", typeof(bool));
                dtGrid.Columns.Add("GRUPOS_EXCLUIR", typeof(bool));

                DataRow dtRows = dtGrid.NewRow();

                foreach (DataRow item in dtGruposAcesso.Rows)
                {
                    dtRows["GRUPOS_GRUPO"] = item["GRUPO"].ToString();
                    dtRows["GRUPOS_DESCRICAO"] = item["DESCRICAO"].ToString();
                    dtRows["GRUPOS_PARTICIPANTES"] = item["PARTICIPANTES"].ToString();
                    dtRows["GRUPOS_INSERIR"] = item["INCLUIR"].ToString().Equals("1") ? true : false;
                    dtRows["GRUPOS_ALTERAR"] = item["ALTERAR"].ToString().Equals("1") ? true : false;
                    dtRows["GRUPOS_EXCLUIR"] = item["EXCLUIR"].ToString().Equals("1") ? true : false;

                    dtGrid.Rows.Add(dtRows);
                    dtRows = dtGrid.NewRow();
                }

                dgvGruposAcesso.DataSource = dtGrid;
                dgvGruposAcesso.Refresh();
            }
            else
            {
                this.LimparGrid(dgvGruposAcesso);
            }
        }
        private void PreencherUsuariosGrupo(string grupo)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(@"
                        SELECT 0 AS BTN_LOG,U.USUARIO AS USUARIO,  
		                               CAST(SUBSTR(U.NOME||(SELECT CASE WHEN NVL(UP.VISUALIZAR,0)+NVL(UP.INCLUIR ,0)+NVL(UP.ALTERAR,0)+NVL(UP.EXCLUIR,0) = 0 THEN ' (SEM PERMISSÃO)'   
		                                                ELSE ' (PERMISSÃO: '||DECODE(NVL(UP.VISUALIZAR,0),0,'','VIS')||DECODE(NVL(UP.INCLUIR ,0),0,'',' INC')  
		                                                               ||DECODE(NVL(UP.ALTERAR   ,0),0,'',' ALT')||DECODE(NVL(UP.EXCLUIR,0),0,'',' EXC')||' )' END   
		                                          FROM SEG.USUARIOS_PERMISSOES UP WHERE UP.USUARIO = U.USUARIO AND PROGRAMA = '" + this.CodPrograma + @"'),1,60) AS CHAR(60)) AS NOME,  
		                               CAST(C.CENTRO_CUSTO || ' - ' || C.DESCRICAO_CCUST AS VARCHAR2(115)) AS CENTRO_CUSTO,            		  
		                               U.MASTER,  
		                               (SELECT DECODE(COUNT(*),0,0,1) FROM SEG.USUARIOS_PERMISSOES WHERE USUARIO = U.USUARIO AND PROGRAMA = '" + this.CodPrograma + @"') HERANCA,         
                                       (SELECT UGI.ADMIN FROM SEG.USUARIOS_GRUPOS UGI WHERE UGI.USUARIO = U.USUARIO AND UGI.GRUPO = " + grupo + @") AS ADMIN_GRUPO,
                                        U.SITUACAO
		                        FROM SEG.USUARIOS U 
		                             LEFT JOIN MTD.VW_COLABORADORES C ON(C.MATRICULA = U.USUARIO) 
		                        WHERE U.USUARIO IN(SELECT UG.USUARIO FROM SEG.USUARIOS_GRUPOS UG WHERE UG.GRUPO = " + grupo + @" ) 
		                        ORDER BY U.NOME ");
            DataTable dtUsuariosGrupo = this.retornaDataTable(sql);

            if (dtUsuariosGrupo.Rows.Count > 0)
            {
                DataTable dtGrid = new DataTable();
                dtGrid.Columns.Add("GRUPOS_USUARIOS_USUARIO", typeof(string));
                dtGrid.Columns.Add("GRUPOS_USUARIOS_NOME", typeof(string));
                dtGrid.Columns.Add("GRUPOS_USUARIOS_CENTROCUSTO", typeof(string));
                dtGrid.Columns.Add("GRUPOS_USUARIOS_MASTER", typeof(string));
                dtGrid.Columns.Add("GRUPOS_USUARIOS_ADM_GRUPO", typeof(string));
                dtGrid.Columns.Add("GRUPOS_USUARIOS_HERANCA", typeof(string));
                dtGrid.Columns.Add("GRUPOS_SITUACAO", typeof(string));

                DataRow dtRows = dtGrid.NewRow();

                foreach (DataRow item in dtUsuariosGrupo.Rows)
                {
                    dtRows["GRUPOS_USUARIOS_USUARIO"] = item["USUARIO"].ToString();
                    dtRows["GRUPOS_USUARIOS_NOME"] = item["NOME"].ToString().Replace("  ", ""); //Remove o excesso de espaços em branco no final do nome
                    dtRows["GRUPOS_USUARIOS_CENTROCUSTO"] = item["CENTRO_CUSTO"].ToString();
                    dtRows["GRUPOS_USUARIOS_MASTER"] = item["MASTER"].ToString();
                    dtRows["GRUPOS_USUARIOS_ADM_GRUPO"] = item["ADMIN_GRUPO"].ToString();
                    dtRows["GRUPOS_USUARIOS_HERANCA"] = item["HERANCA"].ToString();
                    dtRows["GRUPOS_SITUACAO"] = item["SITUACAO"].ToString();

                    dtGrid.Rows.Add(dtRows);
                    dtRows = dtGrid.NewRow();
                }

                dgvUsuariosGrupo.DataSource = dtGrid;
                dgvUsuariosGrupo.Refresh();

                //Colorir células
                foreach (DataGridViewRow item in dgvUsuariosGrupo.Rows)
                {
                    if (item.Cells["GRUPOS_SITUACAO"].Value.ToString().Equals("0")) // Demitido
                    {
                        item.DefaultCellStyle.BackColor = Color.Salmon;
                    }
                    else if (item.Cells["GRUPOS_SITUACAO"].Value.ToString().Equals("2")) // Licenciado
                    {
                        item.DefaultCellStyle.BackColor = Color.FromArgb(192, 255, 255);
                    }
                    else if (item.Cells["GRUPOS_USUARIOS_MASTER"].Value.ToString().Equals("1"))
                    {
                        item.DefaultCellStyle.BackColor = Color.FromArgb(255, 227, 215);
                    }
                    else if (item.Cells["GRUPOS_USUARIOS_ADM_GRUPO"].Value.ToString().Equals("1"))
                    {
                        item.DefaultCellStyle.BackColor = Color.FromArgb(205, 205, 254);
                    }
                    else if (item.Cells["GRUPOS_USUARIOS_HERANCA"].Value.ToString().Equals("1"))
                    {
                        item.DefaultCellStyle.BackColor = Color.FromArgb(165, 209, 209);
                    }
                }

                dgvUsuariosGrupo.ClearSelection();
            }
            else
            {
                this.LimparGrid(dgvUsuariosGrupo);
            }
        }
        private void PreencherAcessoUsuarios()
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(@"
              SELECT  0 AS BTN_LOG,UG.USUARIO AS USUARIO,  
		    		   U.NOME AS NOME,         
		              CAST(                   
		                   CASE WHEN COUNT(GP.GRUPO) = 1 THEN  
		                           TO_CHAR(MAX(GP.GRUPO))      
		                   ELSE                                 
		                           COUNT(GP.GRUPO) || 'G'      
		                   END AS VARCHAR2(6)) AS GRUPO,       
		        		DECODE(SUM(NVL(1,0)),0,0,1) AS VISUALIZAR,             
		        		DECODE(SUM(NVL(GP.INCLUIR,0)),0,0,1)  AS INCLUIR,    
		        		DECODE(SUM(NVL(GP.ALTERAR,0)),0,0,1)     AS ALTERAR,    
		        		DECODE(SUM(NVL(GP.EXCLUIR,0)),0,0,1)    AS EXCLUIR,   
		               0 AS ADMIN,  
		        		1 AS HERANCA,   
		               CAST(C.CENTRO_CUSTO || ' - ' || C.DESCRICAO_CCUST AS VARCHAR2(115)) AS CENTRO_CUSTO,  
		        		U.MASTER,  					
		               0 AS ADMIN,
                        U.SITUACAO
			   FROM SEG.GRUPOS_PROGRAMAS GP                  
			        INNER JOIN SEG.USUARIOS_GRUPOS UG ON (UG.GRUPO = GP.GRUPO)    
		           INNER JOIN SEG.USUARIOS U ON(U.USUARIO = UG.USUARIO)          
		           LEFT  JOIN MTD.VW_COLABORADORES C ON(C.MATRICULA = U.USUARIO) 
			  WHERE GP.PROGRAMA = '" + this.CodPrograma + @"' 
			        AND NOT EXISTS(SELECT * FROM SEG.USUARIOS_PERMISSOES UP WHERE UP.USUARIO = UG.USUARIO AND UP.PROGRAMA = GP.PROGRAMA)/* Não possui permissão individual */   
			  GROUP BY UG.USUARIO,U.USUARIO,U.NOME,C.CENTRO_CUSTO,C.DESCRICAO_CCUST,U.MASTER, U.SITUACAO
		UNION ALL    
			  SELECT 0 AS BTN_LOG,UP.USUARIO,     
			         U.NOME AS NOME,    
		            '-' AS GRUPO,     
			         NVL(VISUALIZAR,0) VISUALIZAR,     
			         NVL(INCLUIR,0) INCLUIR,           
			         NVL(ALTERAR,0) ALTERAR,           
			         NVL(EXCLUIR,0) EXCLUIR,           
		            UP.ADMIN,                         
			         0 HERANCA,                        
		            CAST(C.CENTRO_CUSTO || ' - ' || C.DESCRICAO_CCUST AS VARCHAR2(115)) AS CENTRO_CUSTO,  
			         U.MASTER,  					
		            UP.ADMIN,
                    U.SITUACAO
			  FROM SEG.USUARIOS_PERMISSOES UP       
			       INNER JOIN SEG.USUARIOS U ON(U.USUARIO = UP.USUARIO) 
		          LEFT  JOIN MTD.VW_COLABORADORES C ON(C.MATRICULA = U.USUARIO)  
			  WHERE UP.PROGRAMA = '" + this.CodPrograma + @"' 
		ORDER BY NOME");
            DataTable dtUsuariosPrograma = this.retornaDataTable(sql);

            if (dtUsuariosPrograma.Rows.Count > 0)
            {
                DataTable dtGrid = new DataTable();
                dtGrid.Columns.Add("USUARIOS_USUARIO", typeof(string));
                dtGrid.Columns.Add("USUARIOS_NOME", typeof(string));
                dtGrid.Columns.Add("USUARIOS_GRUPO", typeof(string));
                dtGrid.Columns.Add("USUARIOS_VISUALIZAR", typeof(string));
                dtGrid.Columns.Add("USUARIOS_INSERIR", typeof(string));
                dtGrid.Columns.Add("USUARIOS_ALTERAR", typeof(string));
                dtGrid.Columns.Add("USUARIOS_EXCLUIR", typeof(string));
                dtGrid.Columns.Add("USUARIOS_ADM", typeof(string));
                dtGrid.Columns.Add("USUARIOS_MASTER", typeof(string));
                dtGrid.Columns.Add("USUARIOS_HERDAR_PERMISSOES_GRUPO", typeof(Image));
                dtGrid.Columns.Add("USUARIOS_CENTROCUSTO", typeof(string));
                dtGrid.Columns.Add("USUARIOS_SITUACAO", typeof(string));

                dtGrid.Columns.Add("USUARIOS_HERANCA", typeof(string));


                DataRow dtRows = dtGrid.NewRow();

                foreach (DataRow item in dtUsuariosPrograma.Rows)
                {
                    dtRows["USUARIOS_USUARIO"] = item["USUARIO"].ToString();
                    dtRows["USUARIOS_NOME"] = item["NOME"].ToString();
                    dtRows["USUARIOS_GRUPO"] = item["GRUPO"].ToString();
                    dtRows["USUARIOS_VISUALIZAR"] = item["VISUALIZAR"].ToString().Equals("1") ? true : false;
                    dtRows["USUARIOS_INSERIR"] = item["INCLUIR"].ToString().Equals("1") ? true : false;
                    dtRows["USUARIOS_ALTERAR"] = item["ALTERAR"].ToString().Equals("1") ? true : false;
                    dtRows["USUARIOS_EXCLUIR"] = item["EXCLUIR"].ToString().Equals("1") ? true : false;
                    dtRows["USUARIOS_ADM"] = item["ADMIN"].ToString().Equals("1") ? true : false;
                    dtRows["USUARIOS_MASTER"] = item["MASTER"].ToString();
                    dtRows["USUARIOS_CENTROCUSTO"] = item["CENTRO_CUSTO"].ToString();
                    dtRows["USUARIOS_SITUACAO"] = item["SITUACAO"].ToString();

                    dtRows["USUARIOS_HERANCA"] = item["HERANCA"].ToString();

                    if ((item["HERANCA"].ToString().Equals("0") || item["ADMIN"].ToString().Equals("1")) && item["MASTER"].ToString().Equals("0"))
                    {
                        dtRows["USUARIOS_HERDAR_PERMISSOES_GRUPO"] = new Bitmap(@"S:\Sistemas dotNet\Figuras\Group.png");
                    }
                    else
                    {
                        dtRows["USUARIOS_HERDAR_PERMISSOES_GRUPO"] = new Bitmap(@"S:\Sistemas dotNet\Figuras\ImagemVazia.png");
                    }

                    dtGrid.Rows.Add(dtRows);
                    dtRows = dtGrid.NewRow();
                }

                dgvAcessosUsuarios.DataSource = dtGrid;
                dgvAcessosUsuarios.Refresh();
            }
            else
            {
                this.LimparGrid(dgvAcessosUsuarios);
            }
        }

        private void ColorirGridAcessosUsuarios()
        {
            //Colorir grid de Acesso por usuário
            foreach (DataGridViewRow item in dgvAcessosUsuarios.Rows)
            {
                if (item.Cells["USUARIOS_SITUACAO"].Value.ToString().Equals("0")) // Demitido
                {
                    item.DefaultCellStyle.BackColor = Color.Salmon;
                }
                else if (item.Cells["USUARIOS_SITUACAO"].Value.ToString().Equals("2")) // Licenciado
                {
                    item.DefaultCellStyle.BackColor = Color.FromArgb(192, 255, 255);
                }
                else if (item.Cells["USUARIOS_MASTER"].Value.ToString().Equals("1"))
                {
                    item.DefaultCellStyle.BackColor = Color.FromArgb(255, 227, 215);
                }
                else if (item.Cells["USUARIOS_ADM"].Value.ToString().Equals("1") || item.Cells["USUARIOS_ADM"].Value.ToString().Equals("True"))
                {
                    item.DefaultCellStyle.BackColor = Color.FromArgb(205, 205, 254);
                }
                else if (item.Cells["USUARIOS_HERANCA"].Value.ToString().Equals("0"))
                {
                    item.DefaultCellStyle.BackColor = Color.FromArgb(165, 209, 209);
                }
            }

            dgvAcessosUsuarios.ClearSelection();


        }

        private void frmManutencaoPermissoes_Load(object sender, EventArgs e)
        {
            BuscarInformacoesPrograma();
            BuscarInformacoesUsuario();
            PreencherGruposAcesso();
            if (dgvGruposAcesso.Rows.Count > 0)
            {
                PreencherUsuariosGrupo(dgvGruposAcesso.Rows[0].Cells["GRUPOS_GRUPO"].Value.ToString());
            }


            //1-Manutencao; 2-Relatorio; 3-Processo; 4-CONSULTA
            if (!this.usuarioAdmin)
            {
                btnAddGrupo.Enabled = false;
                btnAddUsuario.Enabled = false;

                //Grid de grupos
                dgvGruposAcesso.Columns["GRUPOS_INSERIR"].ReadOnly = true;
                dgvGruposAcesso.Columns["GRUPOS_ALTERAR"].ReadOnly = true;
                dgvGruposAcesso.Columns["GRUPOS_EXCLUIR"].ReadOnly = true;

                //Grid de acesso por usuários
                dgvAcessosUsuarios.Columns["USUARIOS_HERDAR_PERMISSOES_GRUPO"].ReadOnly = true;
                dgvAcessosUsuarios.Columns["USUARIOS_INSERIR"].ReadOnly = true;
                dgvAcessosUsuarios.Columns["USUARIOS_ALTERAR"].ReadOnly = true;
                dgvAcessosUsuarios.Columns["USUARIOS_EXCLUIR"].ReadOnly = true;
                dgvAcessosUsuarios.Columns["USUARIOS_ADM"].ReadOnly = true;
                dgvAcessosUsuarios.Columns["USUARIOS_VISUALIZAR"].ReadOnly = true;
            }
        }

        private void btnAddGrupo_Click(object sender, EventArgs e)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(@"
                    SELECT G.GRUPO,G.DESCRICAO, 
		                          (SELECT CAST(DECODE(COUNT(*),1,'1',COUNT(*)) AS INTEGER)
                                 FROM SEG.USUARIOS_GRUPOS UG  
                                INNER JOIN SEG.USUARIOS U ON(U.USUARIO = UG.USUARIO) 
                                WHERE  UG.GRUPO = G.GRUPO AND U.SITUACAO <> 0 ) AS PARTICIPANTES  
		                    FROM SEG.GRUPOS G  
		                    WHERE NOT EXISTS(SELECT * 
                                           FROM SEG.GRUPOS_PROGRAMAS GP  
		                                      WHERE GP.GRUPO = G.GRUPO AND GP.PROGRAMA = '" + this.CodPrograma + @"') 
                    ORDER BY G.DESCRICAO");

            FormBusca fb = new FormBusca(sql.ToString(), new List<System.Data.OracleClient.OracleParameter>(), true, "Busca por grupos", "DESCRICAO", "", "Nenhum Registro Encontrado");
            fb.ShowDialog();

            if (fb.retorno != null)
            {
                int cod_grupo = int.Parse(fb.retorno["GRUPO"].ToString());

                try
                {
                    sql.Clear();
                    sql.Append(@"
                                INSERT INTO SEG.GRUPOS_PROGRAMAS
                                     (GRUPO, PROGRAMA, INCLUIR, EXCLUIR, ALTERAR)
                                   VALUES
                                     (" + cod_grupo + ", '" + this.CodPrograma + "', 0, 0, 0)");

                    Conexao dal = new Conexao(Globals.GetStringConnection(), 2);
                    dal.ExecuteNonQuery(sql.ToString());

                    PreencherGruposAcesso();
                    dgvGruposAcesso.ClearSelection();
                    this.LimparGrid(dgvUsuariosGrupo);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Não foi possível gravar o registro.\nMotivo: " + ex.Message, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        private void btnAddUsuario_Click(object sender, EventArgs e)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(@"
                    SELECT SUBSTR(U.NOME,1,30) AS NOME, 
			       U.USUARIO AS USUARIO,  
			       CAST(CL.CENTRO_CUSTO || ' - ' || SUBSTR(CC.DESCRICAO,1,70) AS VARCHAR2(85)) AS CENTRO_CUSTO,       
			       (SELECT MAX(UG.GRUPO) FROM SEG.USUARIOS_GRUPOS UG WHERE UG.USUARIO = U.USUARIO) AS GRUPO, 
			       (SELECT MAX(G.DESCRICAO)   
			                  FROM (SELECT MAX(GRUPO) AS GRUPO,UG.USUARIO FROM SEG.USUARIOS_GRUPOS UG GROUP BY UG.USUARIO) UG   
			                    INNER JOIN SEG.GRUPOS G ON(G.GRUPO = UG.GRUPO) WHERE UG.USUARIO = U.USUARIO GROUP BY G.DESCRICAO) AS NOMEGRUPO ,  
			       (SELECT DECODE(COUNT(*),1,'1 PARTICIPANTE',COUNT(*) ||' PARTICIPANTES') FROM SEG.USUARIOS_GRUPOS UG    
			      		             WHERE  UG.GRUPO = (SELECT MAX(UG.GRUPO) FROM SEG.USUARIOS_GRUPOS UG WHERE UG.USUARIO = U.USUARIO) ) AS PARTICIPANTES_GRUPO   
			FROM SEG.USUARIOS U 
			     LEFT  JOIN BHORA.COLABORADORES_CONTRATO CCO ON(CCO.MATRICULA = U.USUARIO) 
			     LEFT  JOIN BHORA.COLABORADORES_LOTACAO CL ON(CL.MATRICULA = U.USUARIO) 
			     LEFT  JOIN MTD.CENTROS_CUSTO CC ON(CC.CODIGO = CL.CENTRO_CUSTO) 
			WHERE U.USUARIO NOT IN(SELECT UG.USUARIO FROM SEG.USUARIOS_GRUPOS UG   
			                                INNER JOIN SEG.GRUPOS_PROGRAMAS GP ON(GP.GRUPO = UG.GRUPO) WHERE GP.PROGRAMA = 'LOGIN')  
			      AND U.USUARIO NOT IN(SELECT UP.USUARIO FROM SEG.USUARIOS_PERMISSOES UP WHERE UP.PROGRAMA = 'LOGIN')        
			      AND U.SITUACAO <> 0 ");

            FormBusca fb = new FormBusca(sql.ToString(), new List<System.Data.OracleClient.OracleParameter>(), false, "Busca por usuários", "NOME", "", "Nenhum Registro Encontrado");
            fb.ShowDialog();


            if (fb.retorno != null)
            {
                int cod_usuario = int.Parse(fb.retorno["USUARIO"].ToString());

                try
                {
                    sql.Clear();
                    sql.Append(@"
                                INSERT INTO SEG.USUARIOS_PERMISSOES
                                     (USUARIO, PROGRAMA, INCLUIR, EXCLUIR, ALTERAR, VISUALIZAR, ADMIN)
                                   VALUES
                                     (" + cod_usuario + ", '" + this.CodPrograma + "', 0, 0, 0, 0, 0)");

                    Conexao dal = new Conexao(Globals.GetStringConnection(), 2);
                    dal.ExecuteNonQuery(sql.ToString());

                    PreencherAcessoUsuarios();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Não foi possível gravar o registro.\nMotivo: " + ex.Message, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void tabAcessoPorUsuarios_Paint(object sender, PaintEventArgs e)
        {
            //ja testei, executa apenas uma vez
            PreencherAcessoUsuarios();
        }

        private void dgvGruposAcesso_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (!(e.RowIndex == -1))
            {
                string grupoSelecionado = dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_GRUPO"].Value.ToString();

                //Impede o click nas outras colunas
                string coluna = dgvGruposAcesso.Columns[e.ColumnIndex].Name;
                if (!(coluna.Equals("GRUPOS_INSERIR") ||
                    coluna.Equals("GRUPOS_ALTERAR") ||
                    coluna.Equals("GRUPOS_EXCLUIR") ||
                    coluna.Equals("GRUPOS_EXCLUIR_GRUPO") ||
                    coluna.Equals("colGruposEditar")))
                {
                    dgvGruposAcesso.Columns[e.ColumnIndex].ReadOnly = true;
                }
                else if (this.usuarioAdmin)
                {
                    #region Alterar as permissões do grupo

                    string update_set = "";

                    if (coluna.Equals("GRUPOS_INSERIR"))
                    {
                        update_set = "SET GP.INCLUIR = " + (dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_INSERIR"].Value.ToString().Equals("False") ? "1" : "0").ToString();
                    }
                    else if (coluna.Equals("GRUPOS_ALTERAR"))
                    {
                        update_set = "SET GP.ALTERAR = " + (dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_ALTERAR"].Value.ToString().Equals("False") ? "1" : "0").ToString();
                    }
                    else if (coluna.Equals("GRUPOS_EXCLUIR"))
                    {
                        update_set = "SET GP.EXCLUIR = " + (dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_EXCLUIR"].Value.ToString().Equals("False") ? "1" : "0").ToString();
                    }
                    else if (coluna.Equals("GRUPOS_EXCLUIR_GRUPO"))
                    {
                        if ((MessageBox.Show("Confirma a exclusão do grupo " + grupoSelecionado + " da lista de permissões?", "Atenção", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes))
                        {
                            string sql = (@"DELETE FROM SEG.GRUPOS_PROGRAMAS GP WHERE GP.GRUPO = " + grupoSelecionado + " AND GP.PROGRAMA = '" + this.CodPrograma + "'");
                            Conexao dal = new Conexao(Globals.GetStringConnection(), 2);
                            dal.ExecuteNonQuery(sql);

                            int index = dgvGruposAcesso.SelectedRows[0].Index;
                            PreencherGruposAcesso();
                            dgvGruposAcesso.Rows[index].Selected = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(update_set))
                    {
                        string sql = "";
                        sql = (@"UPDATE SEG.GRUPOS_PROGRAMAS GP " +
                                 update_set +
                               " WHERE GP.GRUPO = " + grupoSelecionado + " AND GP.PROGRAMA = '" + this.CodPrograma + "'");
                        Conexao dal = new Conexao(Globals.GetStringConnection(), 2);
                        dal.ExecuteNonQuery(sql);

                        int index = dgvGruposAcesso.SelectedRows[0].Index;
                        PreencherGruposAcesso();
                        dgvGruposAcesso.Rows[index].Selected = true;
                    }
                    #endregion
                }
                else if (coluna.Equals("colGruposEditar"))
                {
                    #region Verificar se o usuário é administrador do grupo para permitir ou não editar
                    StringBuilder sql = new StringBuilder();
                    sql.Append(@"
                    SELECT ug.admin
                      FROM seg.usuarios_grupos ug
                     WHERE ug.grupo = " + grupoSelecionado + @"
                       AND ug.usuario = " + Globals.Usuario);
                    Conexao dal = new Conexao(Globals.GetStringConnection(), 2);
                    DataTable dtUsuario = dal.ExecuteQuery(sql.ToString());

                    if (dtUsuario.Rows.Count == 1)
                    {
                        if (!dtUsuario.Rows[0][0].ToString().Equals("1"))
                        {
                            MessageBox.Show("Apenas os administradores do grupo têm acesso a este recurso.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            frmManutencaoPermissoesEditarGrupo frm = new frmManutencaoPermissoesEditarGrupo(grupoSelecionado);
                            frm.ShowInTaskbar = false;
                            frm.ShowDialog();
                        }
                    }
                    #endregion
                }
            }
            else
            {
                this.LimparGrid(dgvUsuariosGrupo);
            }
        }
        private void dgvGruposAcesso_CellMouseMove(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 &&
                e.ColumnIndex >= 0 &&
                (dgvGruposAcesso.Columns[e.ColumnIndex].Name.Equals("GRUPOS_EXCLUIR_GRUPO") ||
                dgvGruposAcesso.Columns[e.ColumnIndex].Name.Equals("colGruposEditar")))
            {
                this.Cursor = Cursors.Hand;
            }
            else
                this.Cursor = Cursors.Default;
        }
        private void dgvGruposAcesso_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1 && dgvGruposAcesso.Columns[e.ColumnIndex].Name.Equals("GRUPOS_EXCLUIR_GRUPO"))
            {
                dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_EXCLUIR_GRUPO"].Style.BackColor = Color.IndianRed;
                dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_EXCLUIR_GRUPO"].Style.SelectionBackColor = Color.IndianRed;
            }
            else if (e.RowIndex != -1 && dgvGruposAcesso.Columns[e.ColumnIndex].Name.Equals("colGruposEditar"))
            {
                dgvGruposAcesso.Rows[e.RowIndex].Cells["colGruposEditar"].Style.BackColor = Color.Wheat;
                dgvGruposAcesso.Rows[e.RowIndex].Cells["colGruposEditar"].Style.SelectionBackColor = Color.Wheat;
            }
        }
        private void dgvGruposAcesso_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1 && dgvGruposAcesso.Columns[e.ColumnIndex].Name.Equals("GRUPOS_EXCLUIR_GRUPO"))
            {
                dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_EXCLUIR_GRUPO"].Style.BackColor = dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_GRUPO"].Style.BackColor;
                dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_EXCLUIR_GRUPO"].Style.SelectionBackColor = dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_GRUPO"].Style.SelectionBackColor;
            }
            else if (e.RowIndex != -1 && dgvGruposAcesso.Columns[e.ColumnIndex].Name.Equals("colGruposEditar"))
            {
                dgvGruposAcesso.Rows[e.RowIndex].Cells["colGruposEditar"].Style.BackColor = dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_GRUPO"].Style.BackColor;
                dgvGruposAcesso.Rows[e.RowIndex].Cells["colGruposEditar"].Style.SelectionBackColor = dgvGruposAcesso.Rows[e.RowIndex].Cells["GRUPOS_GRUPO"].Style.SelectionBackColor;
            }
        }
        private void dgvGruposAcesso_SelectionChanged(object sender, EventArgs e)
        {
            if (dgvGruposAcesso.SelectedRows.Count == 1)
            {
                string grupoSelecionado = dgvGruposAcesso.SelectedRows[0].Cells["GRUPOS_GRUPO"].Value.ToString();
                PreencherUsuariosGrupo(grupoSelecionado);
            }
        }
        private void dgvGruposAcesso_MouseLeave(object sender, EventArgs e)
        {
            this.Cursor = Cursors.Default;
        }

        private void dgvUsuariosGrupo_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (!(e.RowIndex == -1))
            {
                string coluna = dgvUsuariosGrupo.Columns[e.ColumnIndex].Name;
                if (coluna.Equals("GRUPOS_USUARIOS_LOG"))
                {
                    string usuario = dgvUsuariosGrupo.Rows[e.RowIndex].Cells["GRUPOS_USUARIOS_USUARIO"].Value.ToString();
                    frmAuditoriaFormulario frmAuditoriaFormulario = new frmAuditoriaFormulario("USUARIOS_PERMISSOES", "SEG", "USUARIO;PROGRAMA", usuario + ";'" + this.CodPrograma + "'");
                    if (frmAuditoriaFormulario.DialogResult == System.Windows.Forms.DialogResult.OK)
                    {
                        frmAuditoriaFormulario.ShowDialog();
                    }
                }

            }

        }
        private void dgvUsuariosGrupo_CellMouseMove(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 &&
                e.ColumnIndex >= 0 &&
                dgvUsuariosGrupo.Columns[e.ColumnIndex].Name.Equals("GRUPOS_USUARIOS_LOG"))
            {
                this.Cursor = Cursors.Hand;
            }
            else
                this.Cursor = Cursors.Default;
        }
        private void dgvUsuariosGrupo_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1 && dgvUsuariosGrupo.Columns[e.ColumnIndex].Name.Equals("GRUPOS_USUARIOS_LOG"))
            {
                dgvUsuariosGrupo.Rows[e.RowIndex].Cells["GRUPOS_USUARIOS_LOG"].Style.BackColor = Color.Gold;
                dgvUsuariosGrupo.Rows[e.RowIndex].Cells["GRUPOS_USUARIOS_LOG"].Style.SelectionBackColor = Color.Gold;
            }
        }
        private void dgvUsuariosGrupo_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1 && dgvUsuariosGrupo.Columns[e.ColumnIndex].Name.Equals("GRUPOS_USUARIOS_LOG"))
            {
                dgvUsuariosGrupo.Rows[e.RowIndex].Cells["GRUPOS_USUARIOS_LOG"].Style.BackColor = dgvUsuariosGrupo.Rows[e.RowIndex].Cells["GRUPOS_USUARIOS_USUARIO"].Style.BackColor;
                dgvUsuariosGrupo.Rows[e.RowIndex].Cells["GRUPOS_USUARIOS_LOG"].Style.SelectionBackColor = dgvUsuariosGrupo.Rows[e.RowIndex].Cells["GRUPOS_USUARIOS_USUARIO"].Style.SelectionBackColor;
            }
        }
        private void dgvUsuariosGrupo_MouseLeave(object sender, EventArgs e)
        {
            this.Cursor = Cursors.Default;
        }

        private void dgvAcessosUsuarios_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (!(e.RowIndex == -1))
            {
                //Impede o click nas outras colunas
                string coluna = dgvAcessosUsuarios.Columns[e.ColumnIndex].Name;
                if (!(coluna.Equals("USUARIOS_LOG") ||
                    coluna.Equals("USUARIOS_VISUALIZAR") ||
                    coluna.Equals("USUARIOS_INSERIR") ||
                    coluna.Equals("USUARIOS_ALTERAR") ||
                    coluna.Equals("USUARIOS_EXCLUIR") ||
                    coluna.Equals("USUARIOS_ADM") ||
                    coluna.Equals("USUARIOS_HERDAR_PERMISSOES_GRUPO")))
                {
                    dgvAcessosUsuarios.Columns[e.ColumnIndex].ReadOnly = true;
                }
                else if (coluna.Equals("USUARIOS_LOG"))
                {
                    string usuario = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_USUARIO"].Value.ToString();
                    frmAuditoriaFormulario frmAuditoriaFormulario = new frmAuditoriaFormulario("USUARIOS_PERMISSOES", "SEG", "USUARIO;PROGRAMA", usuario + ";'" + this.CodPrograma + "'");
                    if (frmAuditoriaFormulario.DialogResult == System.Windows.Forms.DialogResult.OK)
                    {
                        frmAuditoriaFormulario.ShowDialog();
                    }
                }
                else if (this.usuarioAdmin)
                {
                    if (coluna.Equals("USUARIOS_HERDAR_PERMISSOES_GRUPO"))
                    {
                        #region Atribuir as permissoes do grupo ao usuário

                        //Proibir o click quando nao tiver o icone de grupo (usuario ja com as permissoes do grupo)
                        if (dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERDAR_PERMISSOES_GRUPO"].Style.BackColor != Color.LimeGreen)
                        {
                            return;
                        }

                        string usuario = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_USUARIO"].Value.ToString();
                        bool permissaoIndividual = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERANCA"].Value.ToString().Equals("0") ? true : false;

                        //Proibir um usuário admin de tirar sua própria função de admin)
                        if (usuario.Equals(Globals.Usuario.ToString()))
                        {
                            dgvAcessosUsuarios.Rows[e.RowIndex].Cells[e.ColumnIndex].ReadOnly = true;
                            dgvAcessosUsuarios.ClearSelection();
                            return;
                        }
                        else
                        {
                            if (permissaoIndividual)
                            {
                                if ((MessageBox.Show("Confirma a atribuição das permissões do grupo ao usuário " + usuario + "?", "Atenção", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes))
                                {
                                    string sql = @" DELETE FROM SEG.USUARIOS_PERMISSOES UP
                                         WHERE UP.USUARIO = " + usuario + @"
                                           AND UP.PROGRAMA = '" + this.CodPrograma + "'";
                                    Conexao dal = new Conexao(Globals.GetStringConnection(), 2);
                                    dal.ExecuteNonQuery(sql);

                                    PreencherAcessoUsuarios();
                                }
                            }
                            else
                            {
                                MessageBox.Show("O usuário " + usuario + " já possui as permissões do grupo.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        #region Alterar as permissões do usuário
                        string usuario = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_USUARIO"].Value.ToString();

                        string update_set = "";
                        string insert_values = "";

                        string inserir = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_INSERIR"].Value.ToString().Equals("True") ? "1" : "0";
                        string excluir = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_EXCLUIR"].Value.ToString().Equals("True") ? "1" : "0";
                        string alterar = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ALTERAR"].Value.ToString().Equals("True") ? "1" : "0";
                        string visualizar = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_VISUALIZAR"].Value.ToString().Equals("True") ? "1" : "0";
                        string admin = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value.ToString().Equals("True") ? "1" : "0";


                        bool permissaoIndividual = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERANCA"].Value.ToString().Equals("0") ? true : false;

                        if (coluna.Equals("USUARIOS_INSERIR"))
                        {
                            string valor = (inserir.Equals("0") ? "1" : "0").ToString();

                            if (permissaoIndividual)
                            {
                                update_set = "SET UP.INCLUIR = " + valor;
                            }
                            else
                            {
                                insert_values = (valor + "," + excluir + "," + alterar + "," + visualizar + "," + admin);
                            }
                        }
                        else if (coluna.Equals("USUARIOS_EXCLUIR"))
                        {
                            string valor = (excluir.Equals("0") ? "1" : "0").ToString();

                            if (permissaoIndividual)
                            {
                                update_set = "SET UP.EXCLUIR = " + valor;
                            }
                            else
                            {
                                insert_values = (inserir + "," + valor + "," + alterar + "," + visualizar + "," + admin);
                            }
                        }
                        else if (coluna.Equals("USUARIOS_ALTERAR"))
                        {
                            string valor = (alterar.Equals("0") ? "1" : "0").ToString();

                            if (permissaoIndividual)
                            {
                                update_set = "SET UP.ALTERAR = " + valor;
                            }
                            else
                            {
                                insert_values = (inserir + "," + excluir + "," + valor + "," + visualizar + "," + admin);
                            }
                        }
                        else if (coluna.Equals("USUARIOS_VISUALIZAR"))
                        {
                            string valor = (visualizar.Equals("0") ? "1" : "0").ToString();

                            if (permissaoIndividual)
                                update_set = "SET UP.VISUALIZAR = " + valor;

                            else
                            {
                                insert_values = (inserir + "," + excluir + "," + alterar + "," + valor + "," + admin);
                            }
                        }
                        else if (coluna.Equals("USUARIOS_ADM"))
                        {
                            //Proibir um usuário admin de tirar sua própria função de admin)
                            if (usuario.Equals(Globals.Usuario.ToString()))
                            {
                                dgvAcessosUsuarios.Rows[e.RowIndex].Cells[e.ColumnIndex].ReadOnly = true;

                                if (dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value.ToString().Equals("0"))
                                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value = 1;
                                else
                                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value = 0;

                                dgvAcessosUsuarios.ClearSelection();
                                return;
                            }
                            else
                            {
                                string valor = (admin.Equals("0") ? "1" : "0").ToString();

                                if (permissaoIndividual)
                                {
                                    update_set = "SET UP.ADMIN = " + valor;
                                }
                                else
                                {
                                    insert_values = (inserir + "," + excluir + "," + alterar + "," + visualizar + "," + valor);
                                }
                            }
                        }

                        string sql = "";

                        //Usuários com permissão individual
                        if (permissaoIndividual)
                        {
                            sql = (@"UPDATE SEG.USUARIOS_PERMISSOES UP " +
                                 update_set +
                               " WHERE UP.USUARIO = " + usuario + " AND UP.PROGRAMA = '" + this.CodPrograma + "'");
                        }
                        //Usuários com permissão do grupo (inserir registro em seg.usuarios_permissoes)
                        else
                        {
                            sql = (@"   INSERT INTO SEG.USUARIOS_PERMISSOES (USUARIO, PROGRAMA, INCLUIR, EXCLUIR, ALTERAR, VISUALIZAR, ADMIN) VALUES (" + usuario + ",'" + this.CodPrograma + "'," + insert_values + ")");
                        }

                        Conexao dal = new Conexao(Globals.GetStringConnection(), 2);
                        dal.ExecuteNonQuery(sql);

                        PreencherAcessoUsuarios();

                        #endregion
                    }
                }
            }
        }
        private void dgvAcessosUsuarios_CellMouseMove(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                string heranca = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERANCA"].Value.ToString();
                string master = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_MASTER"].Value.ToString();
                string admin = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value.ToString();

                if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_HERDAR_PERMISSOES_GRUPO") &&
                    (((heranca.Equals("0") || admin.Equals("1")) && master.Equals("0"))))
                {
                    this.Cursor = Cursors.Hand;
                }
                else if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_LOG"))
                {
                    this.Cursor = Cursors.Hand;
                }
                else
                {
                    this.Cursor = Cursors.Default;
                }
            }
            else
                this.Cursor = Cursors.Default;
        }
        private void dgvAcessosUsuarios_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                string heranca = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERANCA"].Value.ToString();
                string master = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_MASTER"].Value.ToString();
                string admin = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value.ToString();


                if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_HERDAR_PERMISSOES_GRUPO") &&
                    (((heranca.Equals("0") || admin.Equals("1")) && master.Equals("0"))))
                {
                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERDAR_PERMISSOES_GRUPO"].Style.BackColor = Color.LimeGreen;
                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERDAR_PERMISSOES_GRUPO"].Style.SelectionBackColor = Color.LimeGreen;
                }
                else if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_LOG"))
                {
                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_LOG"].Style.BackColor = Color.Gold;
                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_LOG"].Style.SelectionBackColor = Color.Gold;
                }
            }
        }
        private void dgvAcessosUsuarios_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                string heranca = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERANCA"].Value.ToString();
                string master = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_MASTER"].Value.ToString();
                string admin = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value.ToString();


                if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_HERDAR_PERMISSOES_GRUPO") &&
                    (((heranca.Equals("0") || admin.Equals("1")) && master.Equals("0"))))
                {
                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERDAR_PERMISSOES_GRUPO"].Style.BackColor = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_USUARIO"].Style.BackColor;
                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_HERDAR_PERMISSOES_GRUPO"].Style.SelectionBackColor = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_USUARIO"].Style.SelectionBackColor;
                }
                else if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_LOG"))
                {
                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_LOG"].Style.BackColor = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_USUARIO"].Style.BackColor;
                    dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_LOG"].Style.SelectionBackColor = dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_USUARIO"].Style.SelectionBackColor;
                }
            }
        }
        private void dgvAcessosUsuarios_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            ColorirGridAcessosUsuarios();
        }
        private void dgvAcessosUsuarios_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (this.usuarioAdmin)
            {
                var ck = new DataGridViewCheckBoxCell();

                if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_VISUALIZAR"))
                {
                    ck = (DataGridViewCheckBoxCell)dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_VISUALIZAR"];

                    if (ck.Value.ToString().Equals("0"))
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_VISUALIZAR"].Value = 1;

                    else
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_VISUALIZAR"].Value = 0;

                    dgvAcessosUsuarios.RefreshEdit();
                }

                else if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_INSERIR"))
                {
                    ck = (DataGridViewCheckBoxCell)dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_INSERIR"];

                    if (ck.Value.ToString().Equals("0"))
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_INSERIR"].Value = 1;

                    else
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_INSERIR"].Value = 0;

                    dgvAcessosUsuarios.RefreshEdit();
                }

                else if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_ALTERAR"))
                {
                    ck = (DataGridViewCheckBoxCell)dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ALTERAR"];

                    if (ck.Value.ToString().Equals("0"))
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ALTERAR"].Value = 1;

                    else
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ALTERAR"].Value = 0;

                    dgvAcessosUsuarios.RefreshEdit();
                }

                else if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_EXCLUIR"))
                {
                    ck = (DataGridViewCheckBoxCell)dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_EXCLUIR"];

                    if (ck.Value.ToString().Equals("0"))
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_EXCLUIR"].Value = 1;

                    else
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_EXCLUIR"].Value = 0;

                    dgvAcessosUsuarios.RefreshEdit();
                }

                else if (dgvAcessosUsuarios.Columns[e.ColumnIndex].Name.Equals("USUARIOS_ADM"))
                {
                    ck = (DataGridViewCheckBoxCell)dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"];

                    if (ck.Value.ToString().Equals("0"))
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value = 1;

                    else
                        dgvAcessosUsuarios.Rows[e.RowIndex].Cells["USUARIOS_ADM"].Value = 0;

                    dgvAcessosUsuarios.RefreshEdit();
                }
            }
        }
        private void dgvAcessosUsuarios_MouseLeave(object sender, EventArgs e)
        {
            this.Cursor = Cursors.Default;
        }
    }
}
