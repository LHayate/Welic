using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.Reporting.WinForms;
using Classes.Uteis;
using System.Diagnostics;
using System.Text.RegularExpressions;
using System.Threading;
using System.IO;
using System.Windows.Forms.Uniube;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;


namespace System.Windows.Forms.Uniube
{
    public partial class FormRelatorioCrystal : FormUniube
    {
        #region Declaração Varivaeis Globais
        protected DataTable dtReportData = new DataTable();       
        #endregion

        public FormRelatorioCrystal()
        {
            InitializeComponent();
            ChangeToolBar();
        }


        /// <summary>
        /// Construtor com bloqueio para múltiplas instâncias do formulário
        /// </summary>
        /// <param name="frmP">Formulário principal do projeto.</param>
        public FormRelatorioCrystal(Form frmP)
            : base(frmP)
        {
            InitializeComponent();
            ChangeToolBar();
        }
                        
        #region ExportaPDF
        private void toolStripBtnPDF_Click(object sender, EventArgs e)
        {
            String fileName = getLocalSave("PDF|*.pdf");
            // Verfica se o valor que retorno e diferente de vazio 
            if (fileName != "")
            {
                CreateDocument(fileName, ExportFormatType.PortableDocFormat);
            }
        }
        #endregion

        private string getLocalSave(string filter)
        {
            // Abre janela para usuario escolher onde salvar o Excel
            SaveFileDialog vAbreArq = new SaveFileDialog();

            // Definição do tipo de Arquivo
            vAbreArq.Filter = filter;
            String fileName = "";

            vAbreArq.Title = "Salvar como";
            if (vAbreArq.ShowDialog() == DialogResult.OK)
            {
                // Caminho do arquivo
                fileName = vAbreArq.FileName;
            }

            return fileName;
        }

        private void CreateDocument(string fileName, ExportFormatType tipoDocumento)
        {
            try
            {
                ReportDocument cryRpt = (ReportDocument)this.crystalRptUniube.ReportSource;
                ExportOptions CrExportOptions;
                DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();

                ExportFormatOptions CrFormatTypeOptions = null;

                switch (tipoDocumento)
                {
                    case ExportFormatType.Excel:
                        CrFormatTypeOptions = new ExcelFormatOptions();
                        break;

                    case ExportFormatType.PortableDocFormat:
                        CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        break;
                }

                if (CrFormatTypeOptions == null)
                    throw new Exception("Tipo de documento inválido para exportar!");

                ExcelFormatOptions tr = new ExcelFormatOptions();

                CrDiskFileDestinationOptions.DiskFileName = fileName;
                CrExportOptions = cryRpt.ExportOptions;
                {
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = tipoDocumento;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                }
                cryRpt.Export();

                ExportaExcel.AbrirExcel(fileName);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro ao criar arquivo PDF. " + ex.Message);
            }
        }

        #region Imprime Relatorio
        private void toolStripBtnImpressora_Click(object sender, EventArgs e)
        {
            /*Comando aciona o PrintDialog*/
            crystalRptUniube.PrintReport();
        }
        #endregion
        
        private void FormRelatorio_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.dtReportData.Dispose();
            ReportDocument cryRpt = (ReportDocument)this.crystalRptUniube.ReportSource;
            if (cryRpt != null)
                cryRpt.Dispose();
            this.crystalRptUniube.Refresh();
        }

        //public rptFormat TipoExportacao
        //{
        //    get { return _tipoExportacao; }
        //    set { _tipoExportacao = value; }
        //}
        
        private void toolStripBtnExcel_Click(object sender, EventArgs e)
        {
            String fileName = getLocalSave("Excel|*.xls|Pasta de Trabalho do Excel|*.xlsx");

            // Verfica se o valor que retorno e diferente de vazio 
            if (fileName != "")
            {
                Classes.Uteis.ExportaExcel.ExportaParaExcel(dtReportData, fileName, true);
            }
        }

        protected ToolStripButton toolStripBtnExcel = new ToolStripButton();
        protected ToolStripButton toolStripBtnPDF = new ToolStripButton();
        protected ToolStripButton toolStripBtnImpressora = new ToolStripButton();     
        private void ChangeToolBar()
        {
            Image img;
            //EXCEL
            img = Image.FromFile("S:\\Sistemas dotNet\\Figuras\\iExcelDados22.png");
            toolStripBtnExcel = new ToolStripButton("", img, toolStripBtnExcel_Click);
            toolStripBtnExcel.Visible = true;
            toolStripBtnExcel.Enabled = true;
            toolStripBtnExcel.ImageAlign = ContentAlignment.MiddleCenter;
            toolStripBtnExcel.ImageScaling = ToolStripItemImageScaling.None;
            toolStripBtnExcel.AutoSize = true;
            toolStripBtnExcel.Height = img.Height;
            toolStripBtnExcel.Width = img.Width;
            toolStripBtnExcel.Alignment = ToolStripItemAlignment.Left;
            toolStripBtnExcel.ToolTipText = "Modo Folha de Dados";

            //PDF
            img = Image.FromFile("S:\\Sistemas dotNet\\Figuras\\iPdf22.png");
            toolStripBtnPDF = new ToolStripButton("", img, toolStripBtnPDF_Click);
            toolStripBtnPDF.Visible = true;
            toolStripBtnPDF.Enabled = true;
            toolStripBtnPDF.ImageAlign = ContentAlignment.MiddleCenter;
            toolStripBtnPDF.ImageScaling = ToolStripItemImageScaling.None;
            toolStripBtnPDF.AutoSize = true;
            toolStripBtnPDF.Height = img.Height;
            toolStripBtnPDF.Width = img.Width;
            toolStripBtnPDF.Alignment = ToolStripItemAlignment.Left;
            toolStripBtnPDF.ToolTipText = "PDF";

            //IMPRESSORA
            img = Image.FromFile("S:\\Sistemas dotNet\\Figuras\\iImprimir22.png");
            toolStripBtnImpressora = new ToolStripButton("", img, toolStripBtnImpressora_Click);
            toolStripBtnImpressora.Visible = true;
            toolStripBtnImpressora.Enabled = true;
            toolStripBtnImpressora.ImageAlign = ContentAlignment.MiddleCenter;
            toolStripBtnImpressora.ImageScaling = ToolStripItemImageScaling.None;
            toolStripBtnImpressora.AutoSize = true;
            toolStripBtnImpressora.Height = img.Height;
            toolStripBtnImpressora.Width = img.Width;
            toolStripBtnImpressora.Alignment = ToolStripItemAlignment.Left;
            toolStripBtnImpressora.ToolTipText = "Imprimir";
            
            //Adiciona novos botões e altera ordem da barra de menu          
            ToolStrip ts = new ToolStrip();
            ts = FindToolStrip<ToolStrip>(this.crystalRptUniube);

            int index = 0;
            ToolStripItem[] listOptions = new ToolStripItem[ts.Items.Count + 5];
            listOptions[index++] = toolStripBtnImpressora;
            listOptions[index++] = new ToolStripSeparator();
            listOptions[index++] = toolStripBtnExcel;
            listOptions[index++] = toolStripBtnPDF;
            listOptions[index++] = new ToolStripSeparator();

            for (int i = 0; i < ts.Items.Count; i++)
            {
                listOptions[index++] = ts.Items[i];
            }

            ts.Items.Clear();
            ts.Items.AddRange(listOptions);
        }

        private T FindToolStrip<T>(Control control) where T : System.Windows.Forms.Control
        {
            if (control == null)
            {
                return null;
            }
            else if (control is T)
            {
                //muda a cor da barra
                control.BackColor = Color.FromArgb(195, 217, 241);
                return (T)control;
            }
            else
            {
                T result = null;

                foreach (Control embedded in control.Controls)
                {
                    if (result == null)
                    {
                        result = FindToolStrip<T>(embedded);
                    }
                }

                return result;
            }
        }
    }
}