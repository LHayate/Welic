using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Classes.Dal;
using Classes.Entity;
using System.Data.OracleClient;

namespace System.Windows.Forms.Uniube.RecursosGenericos
{
    public partial class FormBusca2 : FormUniube
    {
        private DataTable _DtDadosOriginais { get; set; }
        private DataTable _DtDadosFiltrados { get; set; }
        private bool _AutoExecutar { get; set; }
        private bool _RemoverAcentuacao { get; set; }

        private DataRow _Retorno;

        string descNumDataIgualA = "É IGUAL A";
        string descNumDataDiferenteDe = "É DIFERENTE DE";
        string descNumDataMaiorQue = "É MAIOR DO QUE";
        string descNumDataMaiorIgualA = "É MAIOR OU IGUAL A";
        string descNumDataMenorQue = "É MENOR DO QUE";
        string descNumDataMenorIgualA = "É MENOR OU IGUAL A";
        string descNumDataEntre = "ESTÁ ENTRE";

        string descTextoComecaCom = "COMEÇA COM";
        string descTextoTerminaCom = "TERMINA COM";
        string descTextoContem = "CONTÉM";
        string descTextoNaoContem = "NÃO CONTÉM";
        string descTextoIgualA = "É IGUAL A";
        string descTextoDiferenteDe = "É DIFERENTE DE";

        public FormBusca2(DataTable dtDados, bool autoExecutar, string colunaPrincipal, string titulo = "Buscar", string mensagemSemRegistro = "Nenhum registro encontrado.", bool removerAcentuacao = true)
        {
            InitializeComponent();
            this._DtDadosOriginais = dtDados;
            this._AutoExecutar = autoExecutar;
            this._RemoverAcentuacao = removerAcentuacao;
            this.Text = titulo;
            PreencherCboColunas(colunaPrincipal);

            if (autoExecutar)
                PreencheGrid();
        }

        /// <summary>
        /// Preenche a Combo da Colunas da Query
        /// </summary>
        /// <param name="colunaPrincipal">Coluna Principal</param>
        private void PreencherCboColunas(string colunaPrincipal)
        {
            DataTable dt = new DataTable();
            DataTable dtColunas = new DataTable();
            DataRow dr = null;

            dt = this._DtDadosOriginais;

            dtColunas.Columns.Add("COLUNA");
            dtColunas.Columns.Add("TIPO");
            cboColuna.DisplayMember = "COLUNA";
            cboColuna.ValueMember = "TIPO";

            colunaPrincipal = colunaPrincipal.ToUpper();
            if (!string.IsNullOrEmpty(colunaPrincipal))
            {
                if (dt.Columns[colunaPrincipal] == null)
                    MessageBox.Show("Coluna '" + colunaPrincipal + "' não encontrada na Tabela", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                {
                    dr = dtColunas.NewRow();
                    dr["COLUNA"] = colunaPrincipal;
                    dr["TIPO"] = dt.Columns[colunaPrincipal].DataType;
                    dtColunas.Rows.Add(dr);
                }
            }

            foreach (DataColumn dc in dt.Columns)
            {
                if (colunaPrincipal != dc.ColumnName)
                {
                    dr = dtColunas.NewRow();
                    dr["COLUNA"] = dc.ColumnName;
                    dr["TIPO"] = dt.Columns[dc.ColumnName].DataType;
                    dtColunas.Rows.Add(dr);
                }
            }
            cboColuna.DataSource = dtColunas;
        }

        /// <summary>
        /// Preenche o DataGridView de acordo com os Parametros
        /// </summary>
        private void PreencheGrid()
        {
            if (this._RemoverAcentuacao)
            {
                foreach (DataRow r in _DtDadosOriginais.Rows)
                {
                    //TRANSLATE(P_TEXTO,'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','aaaaAAAAeeEEiIoooOOOuuUUCc');
                    foreach (DataColumn c in _DtDadosOriginais.Columns)
                    {
                        if (c.DataType.Equals(typeof(string)))
                        {
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("à", "a");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("á", "a");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ã", "a");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("â", "a");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("À", "A");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Á", "A");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ã", "A");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Â", "A");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("é", "e");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("è", "e");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ê", "e");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("É", "E");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("È", "E");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ê", "E");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ì", "i");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("í", "i");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("î", "i");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ì", "I");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Í", "I");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Î", "I");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ò", "o");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ó", "o");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("õ", "o");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ô", "o");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ò", "O");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ó", "O");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Õ", "O");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ô", "O");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ù", "u");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ú", "u");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("û", "u");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ù", "U");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ú", "U");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Û", "U");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("ç", "c");
                            r[c.ColumnName] = r[c.ColumnName].ToString().Replace("Ç", "C");
                        }
                    }
                }
            }

            string coluna = cboColuna.Text;
            string condicao = cboCondicao.Text;

            string filtro = txtFiltro.Text.Trim().ToUpper();
            string filtroData = dtpFiltro.Text;
            string select = "";

            string intervalo1 = txtFiltroEntre1.Text.Trim().ToUpper();
            string intervalo2 = txtFiltroEntre2.Text.Trim().ToUpper();

            string intervaloData1 = dtpFiltro.Text;
            string intervaloData2 = dtpFiltroEntre.Text;

            if (cboColuna.SelectedValue.ToString().Equals("System.Decimal") &&
                ((!condicao.Equals(descNumDataEntre) && !filtro.Trim().Equals("")) ||
            (condicao.Equals(descNumDataEntre) && !intervalo1.Trim().Equals("") && !intervalo2.Trim().Equals(""))))
            {
                if (condicao.Equals(descNumDataIgualA))
                    select = coluna + " = " + filtro;
                else if (condicao.Equals(descNumDataDiferenteDe))
                    select = coluna + " <> " + filtro;
                else if (condicao.Equals(descNumDataMaiorQue))
                    select = coluna + " > " + filtro;
                else if (condicao.Equals(descNumDataMaiorIgualA))
                    select = coluna + " >= " + filtro;
                else if (condicao.Equals(descNumDataMenorQue))
                    select = coluna + " < " + filtro;
                else if (condicao.Equals(descNumDataMenorIgualA))
                    select = coluna + " <= " + filtro;
                else if (condicao.Equals(descNumDataEntre))
                    select = coluna + " >= " + intervalo1 + " AND " + coluna + " <= " + intervalo2;
            }
            else if (cboColuna.SelectedValue.ToString().Equals("System.String") &&
                     !condicao.Equals(descNumDataEntre) && !filtro.Trim().Equals(""))
            {
                filtro = filtro.ToUpper().Trim();

                if (condicao.Equals(descTextoComecaCom))
                    select = coluna + " like '" + filtro + "%'";
                else if (condicao.Equals(descTextoTerminaCom))
                    select = coluna + " like '%" + filtro + "'";
                else if (condicao.Equals(descTextoContem))
                    select = coluna + " like '%" + filtro + "%'";
                else if (condicao.Equals(descTextoNaoContem))
                    select = coluna + " not like '%" + filtro + "%'";
                else if (condicao.Equals(descTextoIgualA))
                    select = coluna + " = '" + filtro + "'";
                else if (condicao.Equals(descTextoDiferenteDe))
                    select = coluna + " <> '" + filtro + "'";
            }
            else if (cboColuna.SelectedValue.ToString().Equals("System.DateTime"))
            {
                if (condicao.Equals(descNumDataIgualA))
                    select = coluna + " = '" + filtroData + "'";
                else if (condicao.Equals(descNumDataDiferenteDe))
                    select = coluna + " <> '" + filtroData + "'";
                else if (condicao.Equals(descNumDataMaiorQue))
                    select = coluna + " > '" + filtroData + "'";
                else if (condicao.Equals(descNumDataMaiorIgualA))
                    select = coluna + " >= '" + filtroData + "'";
                else if (condicao.Equals(descNumDataMenorQue))
                    select = coluna + " < '" + filtroData + "'";
                else if (condicao.Equals(descNumDataMenorIgualA))
                    select = coluna + " <= '" + filtroData + "'";
                else if (condicao.Equals(descNumDataEntre))
                    select = coluna + " >= '" + intervaloData1 + "' AND " + coluna + " <= '" + intervaloData2 + "'";
            }

            DataRow[] rows = _DtDadosOriginais.Select(select);
            _DtDadosFiltrados = new DataTable();
            _DtDadosFiltrados = _DtDadosOriginais.Clone();
            foreach (DataRow item in rows)
            {
                _DtDadosFiltrados.ImportRow(item);

                _DtDadosFiltrados.AcceptChanges();
            }

            dgvLista.DataSource = this._DtDadosFiltrados;
        }

        /// <summary>
        /// Preenche a DataRow de Retorno
        /// </summary>
        private void PreencheRetorno()
        {
            if (dgvLista.CurrentRow != null)
            {
                DataRowView currentDataRowView = (DataRowView)dgvLista.CurrentRow.DataBoundItem;
                DataRow row = currentDataRowView.Row;
                this._Retorno = row;
            }
            this.Dispose();
        }

        public string GetRetorno(string coluna)
        {
            if (this._Retorno != null)
                return _Retorno[coluna].ToString();

            return "";
        }
        public DataRow GetRetorno()
        {
            return this._Retorno;
        }

        public DialogResult ShowDialog()
        {
            if (!this.IsDisposed)
            {
                return base.ShowDialog();
            }

            return DialogResult.Cancel;
        }

        private void FormBusca_Load(object sender, EventArgs e)
        {
            txtFiltro.Focus();
            FormBusca_SizeChanged(sender, e);
        }
        private void FormBusca_SizeChanged(object sender, EventArgs e)
        {
            if (this.Width > 1035)
            {
                pnlFiltros.Location = new Point(440, 2);
                pnlCondicao.Height = 35;
            }
            else
            {
                pnlFiltros.Location = new Point(3, 29);
                pnlCondicao.Height = 61;
            }
        }

        private void cboColuna_SelectedIndexChanged(object sender, EventArgs e)
        {
            txtFiltro.Text = string.Empty;
            txtFiltroEntre1.Text = string.Empty;
            txtFiltroEntre2.Text = string.Empty;

            cboCondicao.Items.Clear();

            if (cboColuna.SelectedValue.ToString().Equals("System.Decimal") ||
                cboColuna.SelectedValue.ToString().Equals("System.DateTime"))
            {
                txtFiltro.TipoValor = TextBoxUniube.CTipoValor.Numerico;
                txtFiltroEntre1.TipoValor = TextBoxUniube.CTipoValor.Numerico;
                txtFiltroEntre2.TipoValor = TextBoxUniube.CTipoValor.Numerico;

                cboCondicao.Items.Add(descNumDataIgualA);
                cboCondicao.Items.Add(descNumDataDiferenteDe);
                cboCondicao.Items.Add(descNumDataMaiorQue);
                cboCondicao.Items.Add(descNumDataMaiorIgualA);
                cboCondicao.Items.Add(descNumDataMenorQue);
                cboCondicao.Items.Add(descNumDataMenorIgualA);
                cboCondicao.Items.Add(descNumDataEntre);
            }
            else if (cboColuna.SelectedValue.ToString().Equals("System.String"))
            {
                txtFiltro.TipoValor = TextBoxUniube.CTipoValor.Geral;
                txtFiltroEntre1.TipoValor = TextBoxUniube.CTipoValor.Geral;
                txtFiltroEntre2.TipoValor = TextBoxUniube.CTipoValor.Geral;
                cboCondicao.Items.Add(descTextoComecaCom);
                cboCondicao.Items.Add(descTextoTerminaCom);
                cboCondicao.Items.Add(descTextoContem);
                cboCondicao.Items.Add(descTextoNaoContem);
                cboCondicao.Items.Add(descTextoIgualA);
                cboCondicao.Items.Add(descTextoDiferenteDe);
            }

            cboCondicao.SelectedIndex = 0;
            cboCondicao_SelectedIndexChanged(sender, e);
        }
        private void cboCondicao_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboCondicao.SelectedIndex >= 0)
            {
                dtpFiltro.Visible = false;
                dtpFiltroEntre.Visible = false;

                txtFiltro.Visible = false;
                txtFiltroEntre1.Visible = false;
                txtFiltroEntre2.Visible = false;

                lbEntreData.Visible = false;
                lbEntreTexto.Visible = false;

                switch (cboColuna.SelectedValue.ToString())
                {
                    case ("System.Decimal"):
                        if (cboCondicao.SelectedItem.ToString().Equals(descNumDataEntre))
                        {
                            txtFiltroEntre1.Visible = true;
                            txtFiltroEntre2.Visible = true;
                            lbEntreTexto.Visible = true;
                        }
                        else
                            txtFiltro.Visible = true;
                        break;
                    case ("System.DateTime"):
                        dtpFiltro.Visible = true;
                        if (cboCondicao.SelectedItem.ToString().Equals(descNumDataEntre))
                        {
                            dtpFiltroEntre.Visible = true;
                            lbEntreData.Visible = false;
                        }
                        break;
                    case ("System.String"):
                        txtFiltro.Visible = true;
                        break;
                }
            }
        }

        private void toolStripBtnFiltrar_Click(object sender, EventArgs e)
        {
            PreencheGrid();
        }
        private void toolStripBtnSelecionar_Click(object sender, EventArgs e)
        {
            PreencheRetorno();
        }
        private void toolStripBtnAtualizar_Click(object sender, EventArgs e)
        {
            PreencheGrid();
        }
        private void toolStripBtnExcel_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveDialog = new SaveFileDialog();

            saveDialog.DefaultExt = "xls";
            saveDialog.Filter = "Microsoft Excel (.xls)|*.xls|Todos Arquivos (*.*)|*.*";
            saveDialog.AddExtension = true;
            saveDialog.RestoreDirectory = true;
            saveDialog.Title = "Onde você deseja salvar o arquivos?";
            saveDialog.InitialDirectory = @"C:/";
            if (saveDialog.ShowDialog() == DialogResult.OK)
                Classes.Uteis.ExportaExcel.ExportaParaExcel((DataTable)dgvLista.DataSource, saveDialog.FileName, true);
        }

        private void txtFiltro_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }
        private void dtpFiltro_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }
        private void txtFiltroEntre1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }
        private void txtFiltroEntre2_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }
        private void dtpFiltroEntre_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                PreencheGrid();
            }
        }

        private void AtualizarContagemItensGrid()
        {
            if (dgvLista.Rows.Count > 0)
            {
                lblContagemItensGrid.Visible = true;
                if (dgvLista.Rows.Count == 1)
                    lblContagemItensGrid.Text = "Resultado da busca: 01 item encontrado";
                else if ((dgvLista.Rows.Count > 1) && (dgvLista.Rows.Count < 10))
                    lblContagemItensGrid.Text = "Resultado da busca: 0" + dgvLista.Rows.Count.ToString() + " itens encontrados";
                else if ((dgvLista.Rows.Count >= 10))
                    lblContagemItensGrid.Text = "Resultado da busca: " + dgvLista.Rows.Count.ToString() + " itens encontrados";
            }
            else
            {
                lblContagemItensGrid.Visible = false;
                lblContagemItensGrid.Text = "";
            }


        }
        private void AjustarTamanhoFormulario()
        {
            int totalWidth = 150;
            int totalHeigth = 250;

            //Largura
            foreach (DataGridViewColumn item in dgvLista.Columns)
            {
                //item.AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;

                if (item.Visible)
                    totalWidth += item.Width;
            }
            if (totalWidth > 1040)
                totalWidth = 1040;
            else if (totalWidth < 600)
                totalWidth = 600;

            //Altura
            foreach (DataGridViewRow item in dgvLista.Rows)
            {
                if (item.Visible)
                    totalHeigth += item.Height;
            }
            if (totalHeigth > 700)
                totalHeigth = 700;
            else if (totalHeigth < 400)
                totalHeigth = 400;


            //Centralizar o formulario após a alteração do tamanho
            this.Location = new Point((Screen.PrimaryScreen.WorkingArea.Width - totalWidth) / 2,
                      (Screen.PrimaryScreen.WorkingArea.Height - totalHeigth) / 2);

            this.Width = totalWidth;
            this.Height = totalHeigth;
        }

        private void dgvLista_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            PreencheRetorno();
        }
        private void dgvLista_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
            {
                PreencheRetorno();
            }
        }
        private void dgvLista_DataSourceChanged(object sender, EventArgs e)
        {
            AtualizarContagemItensGrid();
        }
        private void dgvLista_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            AtualizarContagemItensGrid();
        }
        private void dgvLista_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            AtualizarContagemItensGrid();
        }
        private void dgvLista_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
        {
            AjustarTamanhoFormulario();
        }
    }
}