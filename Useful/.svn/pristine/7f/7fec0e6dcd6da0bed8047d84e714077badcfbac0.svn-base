using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Windows.Forms.Design;
using System.Reflection;
using System.Data.Objects.DataClasses;

namespace System.Windows.Forms.Uniube
{
    public partial class FormAssistenteCadastro : FormUniube
    {
        /// <summary>
        /// Formulário que servirá de referência para as operações de Inclusão, Exclusão e Alteração de regristros da grid
        /// </summary>
        protected FormCadastro frmBase { get; set; }
        /// <summary>
        /// Type da classe onde se encontra o método que retornará os dados para preencher a grid, com seu respectivo namespace. Por exemplo: base.typeClasse = typeof(SGANomeDoSistema.Bll.BLL);
        /// </summary>
        protected Type typeClasse { get; set; }
        /// <summary>
        /// Nome do método que retornará uma DataTable com os dados para preenchimento da grid. Por exemplo: base.nomeMetodo = "BuscarAlunos";
        /// </summary>
        protected string nomeMetodo { get; set; }
        protected object[] parametros { get; set; }

        protected object _Entidade { get; set; }

        public FormAssistenteCadastro()
        {
            InitializeComponent();
        }

        private object getRetornoMetodo()
        {
            object retorno = null;

            if (this.typeClasse != null && this.nomeMetodo != null)
            {
                //Instancia a classe "typeClasse"
                object classe = Activator.CreateInstance(this.typeClasse, null);

                //Busca o método contido na classe "typeClasse" 
                MethodInfo methodInfo = typeClasse.GetMethod(this.nomeMetodo);

                //Invoca o método da classe, passando os parametros
                retorno = methodInfo.Invoke(classe, this.parametros);
            }

            return retorno;
        }

        protected virtual void PreencherGrid()
        {
            int indexRowSelecionada = -1;
            if (dgv.CurrentCell != null)
            {
                indexRowSelecionada = dgv.CurrentCell.RowIndex;
            }

            dgv.AutoGenerateColumns = false;

            if (_Entidade == null)
                dgv.DataSource = getRetornoMetodo();
            else
            {
                //Busca o método contido na classe "typeClasse" 
                //new Type[] { } serve para buscar sempre o método que não possui parametros
                MethodInfo methodInfo = _Entidade.GetType().GetMethod(this.nomeMetodo, new Type[] { });

                //Invoca o método da classe, passando os parametros
                object retorno = methodInfo.Invoke(_Entidade, this.parametros);

                dgv.DataSource = retorno;
            }

            dgv.Refresh();


            try
            {
                if (indexRowSelecionada >= 0)
                {
                    dgv.CurrentCell = dgv.Rows[indexRowSelecionada].Cells[0];
                }
            }
            catch (Exception)
            {
            }

            dgv.AdicionarColunasCadastro();
        }

        public virtual void btnNovoRegistro_Click(object sender, EventArgs e)
        {
            if (frmBase != null)
            {
                if (!UsrTemPermissao(_TipoPermissaoCodigoSeguranca.Incluir))
                {
                    MessageBox.Show("Você não possui permissão para Cadastrar Novos Registros nesta tela.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    //Cria uma nova instancia do frmBase;
                    frmBase = (FormCadastro)Activator.CreateInstance(frmBase.GetType());

                    //Configura e chama o frmBase
                    frmBase.FormBorderStyle = Forms.FormBorderStyle.FixedDialog;
                    frmBase.MinimizeBox = false;
                    frmBase.MaximizeBox = false;
                    frmBase.AcaoFormulario = CAcaoFormulario.Novo;
                    frmBase.ShowInTaskbar = false;
                    frmBase.ShowDialog();

                    //Quando o usuario fechar a tela do frmBase, atualiza a grid
                    PreencherGrid();
                }
            }
        }

        protected void dgv_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1 && frmBase != null)
            {
                #region Reinstanciar o frmBase e reaplicar os valores das propriedades
                List<PropertyInfo> propriedades = frmBase.GetPropriedades();
                object value = propriedades[0].GetValue(frmBase, null);
                
                object[,] propriedadesBackup = new object[propriedades.Count, 2];
                for (int i = 0; i < propriedades.Count; i++)
                {
                    propriedadesBackup[i, 0] = propriedades[i].Name;
                    propriedadesBackup[i, 1] = propriedades[i].GetValue(frmBase, null);
                }

                frmBase = (FormCadastro)Activator.CreateInstance(frmBase.GetType());
                
                for (int i = 0; i < propriedadesBackup.GetLength(0); i++)
                {
                    object nome = propriedadesBackup[i, 0];
                    object valor = propriedadesBackup[i, 1];
                    frmBase.GetType().GetProperty(nome.ToString()).SetValue(frmBase, valor, null);
                }
                #endregion

                if (dgv.Columns[e.ColumnIndex].Name.ToUpper().Contains("IMGVER"))
                {
                    if (!UsrTemPermissao(_TipoPermissaoCodigoSeguranca.Visualizar))
                    {
                        MessageBox.Show("Você não possui permissão para Visualizar registros nesta tela.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        frmBase.AcaoFormulario = CAcaoFormulario.Buscar;
                        frmBase.ShowInTaskbar = false;
                        frmBase.ShowDialog();
                        PreencherGrid();
                    }
                }
                else if (dgv.Columns[e.ColumnIndex].Name.ToUpper().Contains("IMGEDITAR"))
                {
                    if (!UsrTemPermissao(_TipoPermissaoCodigoSeguranca.Alterar))
                    {
                        MessageBox.Show("Você não possui permissão para Editar registros nesta tela.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        frmBase.AcaoFormulario = CAcaoFormulario.Editar;
                        frmBase.ShowInTaskbar = false;
                        frmBase.ShowDialog();
                        PreencherGrid();
                    }
                }
                else if (dgv.Columns[e.ColumnIndex].Name.ToUpper().Contains("IMGEXCLUIR"))
                {
                    if (!UsrTemPermissao(_TipoPermissaoCodigoSeguranca.Alterar))
                    {
                        MessageBox.Show("Você não possui permissão para Excluir registros nesta tela.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        frmBase.AcaoFormulario = CAcaoFormulario.Excluir;
                        frmBase.ShowInTaskbar = false;
                        frmBase.ShowDialog();
                        PreencherGrid();
                    }
                }

                if (dgv.Rows.Count > 0 &&
                    e.RowIndex < dgv.Rows.Count &&
                    dgv.Rows[e.RowIndex].Cells[e.ColumnIndex].ReadOnly == false)
                {
                    dgv.BeginEdit(false);
                }
            }
        }

        private void FormAssistente_SizeChanged(object sender, EventArgs e)
        {
            int locX = (pnlBuscar.Size.Width / 2) - (btnBuscar.Size.Width / 2);
            btnBuscar.Location = new Point(locX, btnBuscar.Location.Y);
        }
        private void FormAssistente_Load(object sender, EventArgs e)
        {
            FormAssistente_SizeChanged(sender, e);

            //Código para forçar o index das colunas Imagem para ficarem por último
            foreach (DataGridViewColumn item in dgv.Columns)
            {
                if (item.CellType == new DataGridViewImageColumn().CellType)
                {
                    item.DisplayIndex = dgv.Columns.Count - 1;
                }
            }

            dgv.VincularLabelContagemItensGrid(lblContagemItensGrid);
        }

    }
}
